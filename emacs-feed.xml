<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title><![CDATA[Magnus web site - emacs]]></title>
<description><![CDATA[Magnus web site - emacs]]></description>
<link>https://magnus.therning.org//tag-emacs.html</link>
<lastBuildDate>Sat, 13 Mar 2021 14:35:14 +0100</lastBuildDate>
<item>
  <title><![CDATA[Flycheck and HLS]]></title>
  <description><![CDATA[
<p>
I've been using LSP for most programming languages for a while now. HLS is
really very good now, but I've found that it doesn't warn on quite all things
I'd like it to so I find myself having to swap between the <code>'lsp</code> and
<code>'haskell-ghc</code> checkers. However, since <a href="https://www.flycheck.org/en/latest/">flycheck</a> supports chaining checkers I
thought there must be a way to have both checkers active at the same time.
</p>

<p>
The naive approach didn't work due to load order of things in Spacemacs so I had
to experiment a bit to find something that works.
</p>

<p>
The first issue was to make sure that HLS is available at all. I use <code>shell.nix</code>
together with <a href="https://direnv.net/">direnv</a> extensively and I had noticed that <code>lsp-mode</code> tried to load
HLS before <code>direnv</code> had put it in the <code>$PATH</code>. I think the
<code>'lsp-beforeinitialize-hook</code> is the hook to use for this:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span>add-hook 'lsp-before-initialize-hook #'direnv-update-environment<span class="org-rainbow-delimiters-depth-1">)</span><span class="org-rainbow-delimiters-unmatched">)</span>
</pre>
</div>

<p>
I made a several attempt to chain the checkers but kept on getting
errors due to the <code>'lsp</code> checker not being defined yet. Another problem
I ran into was that the checkers were chained too late, resulting in
having to manually run <code>flycheck-buffer</code> on the first file I opened.
(Deferred loading is a brilliant thing, but make some things really
difficult to debug.) After quite a bit of experimenting and reading the
description of various hooks I did find something that works:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">with-eval-after-load</span> 'lsp-mode
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">defun</span> <span class="org-function-name">magthe:lsp-next-checker</span> <span class="org-rainbow-delimiters-depth-3">()</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>flycheck-add-next-checker 'lsp '<span class="org-rainbow-delimiters-depth-4">(</span>warning . haskell-ghc<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>add-hook 'lsp-lsp-haskell-after-open-hook
            #'magthe:lsp-next-checker<span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
Of course I have no idea if this is the easiest or most elegant solution but it
does work for my testcases:
</p>

<ol class="org-ol">
<li>Open a file in a project, <code>SPC p l</code> - choose project - choose a Haskell file.</li>
<li>Open a project, <code>SPC p l</code> followed by <code>C-d</code>, and then open a Haskell file.</li>
</ol>

<p>
Suggestions for improvements are more than welcome, of course.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-flycheck.html">flycheck</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[haskell]]></category>
  <category><![CDATA[flycheck]]></category>
  <link>https://magnus.therning.org/2021-03-05-000-flycheck-and-hls.html</link>
  <pubDate>Fri, 05 Mar 2021 21:48:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Better Nix setup for Spacemacs]]></title>
  <description><![CDATA[
<p>
In an <a href="file:///posts/2019-12-07-000-nix-setup-for-spacemacs.html">earlier post</a> I documented my setup for getting <a href="https://www.spacemacs.org/">Spacemacs</a>/Emacs to work
with <a href="https://nixos.org/nix/">Nix</a>. I've since found a much more elegant solution based on
</p>

<ul class="org-ul">
<li><a href="https://github.com/direnv/direnv/">direnv</a>, and</li>
<li><a href="https://github.com/wbolster/emacs-direnv">emacs-direnv</a></li>
</ul>

<p>
No more Emacs packages for Nix and no need to defining functions that wrap
executables in an invocation of <code>nix-shell</code>.
</p>

<p>
There's a nice bonus too, with this setup I don't need to run <code>nix-shell</code>, which
always drops me at a bash prompt, instead I get a working setup in my shell of
choice.
</p>

<div id="outline-container-org0ffa6ad" class="outline-2">
<h2 id="org0ffa6ad">Setting up <code>direnv</code></h2>
<div class="outline-text-2" id="text-org0ffa6ad">
<p>
The steps for setting up <code>direnv</code> depends a bit on your setup, but luckily I
found the <a href="https://direnv.net/#basic-installation">official instructions for installing <code>direnv</code></a> to be very clear and
easy to follow. There's not much I can add to that.
</p>
</div>
</div>

<div id="outline-container-org25fa924" class="outline-2">
<h2 id="org25fa924">Setting up Spacemacs</h2>
<div class="outline-text-2" id="text-org25fa924">
<p>
Since <code>emacs-direnv</code> isn't included by default in Spacemacs I needed to do a bit
of setup. I opted to create a layer for it, rather than just drop it in the list
<code>dotspacemacs-additional-packages</code>. Yes, a little more complicated, but not
difficult and I nurture an intention of submitting the layer for inclusion in
Spacemacs itself at some point. I'll see where that goes.
</p>

<p>
For now, I put the following in the file
<code>~/.emacs.d/private/layers/direnv/packages.el</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defconst</span> <span class="org-variable-name">direnv-packages</span>
      '<span class="org-rainbow-delimiters-depth-2">(</span>direnv<span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>

<span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">direnv/init-direnv</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">use-package</span> <span class="org-constant">direnv</span>
    <span class="org-builtin">:init</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>direnv-mode<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org0cf0d1c" class="outline-2">
<h2 id="org0cf0d1c">Setting up the project folders</h2>
<div class="outline-text-2" id="text-org0cf0d1c">
<p>
In each project folder I then add the file <code>.envrc</code> containing a single line:
</p>

<div class="org-src-container">
<pre class="src src-shell">use_nix
</pre>
</div>

<p>
Then I either run <code>direnv allow</code> from the command line, or run the
function <code>direnv-allow</code> after opening the folder in Emacs.
</p>
</div>
</div>

<div id="outline-container-org7bac164" class="outline-2">
<h2 id="org7bac164">Using it</h2>
<div class="outline-text-2" id="text-org7bac164">
<p>
It's as simple as moving into the folder in a shell &#x2013; all required envvars are
set up on entry and unset on exit.
</p>

<p>
In Emacs it's just as simple, just open a file in a project and the envvars are
set. When switching to a buffer outside the project the envvars are unset.
</p>

<p>
There is only one little caveat, <code>nix-build</code> doesn't work inside a Nix shell. I
found out that running
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="org-variable-name">IN_NIX_SHELL</span>= nix-build
</pre>
</div>

<p>
does work though.
</p>
</div>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-nix.html">nix</a> <a href="https://magnus.therning.org/tag-spacemacs.html">spacemacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[nix]]></category>
  <category><![CDATA[spacemacs]]></category>
  <link>https://magnus.therning.org/2020-06-22-000-better-nix-setup-for-spacemacs.html</link>
  <pubDate>Mon, 22 Jun 2020 12:34:00 +0200</pubDate>
</item>
</channel>
</rss>
