<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Magnus web site - emacs]]></title>
<description><![CDATA[Magnus web site - emacs]]></description>
<link>https://magnus.therning.org//tag-emacs.html</link>
<lastBuildDate>Wed, 18 Jun 2025 07:36:20 +0200</lastBuildDate>
<item>
  <title><![CDATA[Reviewing GitHub PRs in Emacs]]></title>
  <description><![CDATA[
<p>
My Emacs config's todo-list has long had an item about finding some way to
review GitHub PRs without having to leave Emacs and when the <a href="https://github.com/magit/forge/issues/75">forge issue</a> that I
subscribe to came alive again I thought it was time to see if I can improve my
config.
</p>

<p>
I found three packages for doing reviews
</p>

<ul class="org-ul">
<li><a href="https://github.com/wandersoncferreira/code-review">code-review</a></li>
<li><a href="https://github.com/charignon/github-review">github-review</a></li>
<li><a href="https://github.com/blahgeek/emacs-pr-review">emacs-pr-review</a></li>
</ul>

<p>
I've tried the first one before but at the time it didn't seem to work at all.
Apparently that's improved somewhat, though there's a PR with a change that's
necessary to make it work.<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> The first two don't support comments on multiple
lines of a PR, there are issues/discussions for both
</p>

<ul class="org-ul">
<li><code>code-review</code>: <a href="https://github.com/wandersoncferreira/code-review/discussions/259">Code suggestion on multiple lines</a></li>
<li><code>github-review</code>: <a href="https://github.com/charignon/github-review/issues/46">Multi-line code comments</a></li>
</ul>

<p>
The last one, <code>emacs-pr-review</code> does support commenting on multiple lines, but
it lacks a nice way of opening a review from <code>magit</code>. What I can do is
</p>

<ol class="org-ol">
<li>position the cursor on a PR in the <code>magit</code> status view, then</li>
<li>copy the the PR's URL using <code>forge-copy-url-at-point-as-kill</code>, and</li>
<li>open the PR by calling <code>pr-review</code> and pasting the PR's URL.</li>
</ol>

<p>
Which I did for a few days until I got tired of it and wrote a function to cut
out they copy/paste part.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">mes/pr-review-via-forge</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">interactive</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">if-let*</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>target <span class="org-rainbow-delimiters-depth-5">(</span>forge--browse-target<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
            <span class="org-rainbow-delimiters-depth-4">(</span>url <span class="org-rainbow-delimiters-depth-5">(</span><span class="org-keyword">if</span> <span class="org-rainbow-delimiters-depth-6">(</span>stringp target<span class="org-rainbow-delimiters-depth-6">)</span> target <span class="org-rainbow-delimiters-depth-6">(</span>forge-get-url target<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
            <span class="org-rainbow-delimiters-depth-4">(</span>rev-url <span class="org-rainbow-delimiters-depth-5">(</span>pr-review-url-parse url<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
      <span class="org-rainbow-delimiters-depth-3">(</span>pr-review url<span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-warning">user-error</span> <span class="org-string">"No PR to review at point"</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
I've bound it to a key in <code>magit-mode-map</code> to make it easier.
</p>

<p>
I have to say I'm not completely happy with <code>emacs-pr-review</code>, so if either of
the other two sort out commenting on multiple lines I'll check them out again.
</p>

<p>
My full setup for <code>pr-review</code> is <a href="https://gitlab.com/magus/mes/-/blob/8615353ec007bd66209ee1ae3badddd26d3a3dc9/lisp/mes-dev-basics.el#L76">here</a>.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
The details can be found among the comments of the <a href="https://github.com/magit/forge/issues/75">forge issue</a>.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://magnus.therning.org/2025-01-19-reviewing-github-prs-in-emacs.html</link>
  <guid>https://magnus.therning.org/2025-01-19-reviewing-github-prs-in-emacs.html</guid>
  <pubDate>Sun, 19 Jan 2025 11:10:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Followup on secrets in my work notes]]></title>
  <description><![CDATA[
<p>
I got the following question on my post on how I handle secrets in my work notes:
</p>

<blockquote>
<p>
Sounds like a nice approach for other secrets but how about <code>:dbconnection</code> for
Orgmode and <code>sql-connection-alist</code>?
</p>
</blockquote>

<p>
I have to admit I'd never come across the variable <code>sql-connection-alist</code>
before. I've never really used <code>sql-mode</code> for more than editing SQL queries and
setting up code blocks for running them was one of the first things I used
<a href="https://github.com/joaotavora/yasnippet">yasnippet</a> for.
</p>

<p>
I did a little reading and unfortunately it looks like <code>sql-connection-alist</code>
can only handle string values. However, there is a variable
<code>sql-password-search-wallet-function</code>, with the default value of
<code>sql-auth-source-search-wallet</code>, so using <a href="https://www.gnu.org/software/emacs/manual/html_mono/auth.html">auth-source</a> is already supported for
the password itself.
</p>

<p>
There seems to be a lack of good tutorials for setting up <code>sql-mode</code> in a secure
way &#x2013; all articles I found place the password in clear-text in the config &#x2013;
filling that gap would be a nice way to contribute to the Emacs community. I'm
sure it'd prompt me to re-evaluate incorporating <code>sql-mode</code> in my workflow.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-org-mode.html">org-mode</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[org-mode]]></category>
  <link>https://magnus.therning.org/2024-09-09-followup-on-secrets-in-my-work-notes.html</link>
  <guid>https://magnus.therning.org/2024-09-09-followup-on-secrets-in-my-work-notes.html</guid>
  <pubDate>Mon, 09 Sep 2024 22:36:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Improving how I handle secrets in my work notes]]></title>
  <description><![CDATA[
<p>
At work I use org-mode to keep notes about useful ways to query our systems,
mostly that involves using the built-in SQL support to access DBs and <a href="https://github.com/ag91/ob-http">ob-http</a> to
send HTTP requests. In both cases I often need to provide credentials for the
systems. I'm embarrassed to admit it, but for a long time I've taken the easy
path and kept all credentials in clear text. Every time I've used one of those
code blocks I've thought I really ought to find a better way of handling these
secrets one of these days. Yesterday was that day.
</p>

<p>
I ended up with two functions that uses <a href="https://www.gnu.org/software/emacs/manual/html_mono/auth.html">auth-source</a> and its <code>~/.authinfo.gpg</code>
file.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">mes/auth-get-pwd</span> <span class="org-rainbow-delimiters-depth-2">(</span>host<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-doc">"Get the password for a host (authinfo.gpg)"</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">-&gt;</span> <span class="org-rainbow-delimiters-depth-3">(</span>auth-source-search <span class="org-builtin">:host</span> host<span class="org-rainbow-delimiters-depth-3">)</span>
      car
      <span class="org-rainbow-delimiters-depth-3">(</span>plist-get <span class="org-builtin">:secret</span><span class="org-rainbow-delimiters-depth-3">)</span>
      funcall<span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>

<span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">mes/auth-get-key</span> <span class="org-rainbow-delimiters-depth-2">(</span>host key<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-doc">"Get a key's value for a host (authinfo.gpg)</span>

<span class="org-doc">Not usable for getting the password (:secret), use '</span><span class="org-doc"><span class="org-constant">mes/auth-get-pwd</span></span><span class="org-doc">'</span>
<span class="org-doc">for that."</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">-&gt;</span> <span class="org-rainbow-delimiters-depth-3">(</span>auth-source-search <span class="org-builtin">:host</span> host<span class="org-rainbow-delimiters-depth-3">)</span>
      car
      <span class="org-rainbow-delimiters-depth-3">(</span>plist-get key<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
It turns out that the library can handle more keys than the documentation
suggests so for DB entries I'm using a <code>machine</code> (<code>:host</code>) that's a bit shorter
and easier to remember than the full AWS hostname. Then I keep the DB host and
name in <code>dbhost</code> (<code>:dbhost</code>) and <code>dbname</code> (<code>:dbname</code>) respectively. That makes
an entry look like this:
</p>

<div class="org-src-container">
<pre class="src src-authinfo"><span class="org-variable-name">machine</span> <span class="org-builtin">db.svc</span> <span class="org-comment-delimiter">login</span> <span class="org-keyword">user</span> <span class="org-comment-delimiter">port</span> <span class="org-type">port</span> <span class="org-comment-delimiter">password</span> <span class="org-doc">pwd</span> <span class="org-constant">dbname</span> dbname <span class="org-constant">dbhost</span> dbhost
</pre>
</div>

<p>
If I use it in a property drawer it looks like this
</p>

<div class="org-src-container">
<pre class="src src-org"><span class="org-org-drawer">:PROPERTIES:</span>
<span class="org-org-special-keyword">:header-args:sql:</span> <span class="org-org-property-value">:engine postgresql</span>
<span class="org-org-special-keyword">:header-args:sql+:</span> <span class="org-org-property-value">:dbhost (mes/auth-get-key "db.svc" :dbhost)</span>
<span class="org-org-special-keyword">:header-args:sql+:</span> <span class="org-org-property-value">:dbport (string-to-number (mes/auth-get-key "db.svc" :port))</span>
<span class="org-org-special-keyword">:header-args:sql+:</span> <span class="org-org-property-value">:dbuser (mes/auth-get-key "db.svc" :user)</span>
<span class="org-org-special-keyword">:header-args:sql+:</span> <span class="org-org-property-value">:dbpassword (mes/auth-get-pwd "db.svc")</span>
<span class="org-org-special-keyword">:header-args:sql+:</span> <span class="org-org-property-value">:database (mes/auth-get-key "db.svc" :dbname)</span>
<span class="org-org-drawer">:END:</span>
</pre>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-org-mode.html">org-mode</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[org-mode]]></category>
  <link>https://magnus.therning.org/2024-09-01-improving-how-i-handle-secrets-in-my-work-notes.html</link>
  <guid>https://magnus.therning.org/2024-09-01-improving-how-i-handle-secrets-in-my-work-notes.html</guid>
  <pubDate>Sun, 01 Sep 2024 15:03:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Removing symlink question]]></title>
  <description><![CDATA[
<p>
I'm not sure why, but all of a sudden I started getting this question every time
emacs starts
</p>

<blockquote>
<p>
Symbolic link to Git-controlled source file; follow link?
</p>
</blockquote>

<p>
After some searching I found out that it's <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Version-Control.html">VC</a> asking. I'm guessing this comes
from <a href="https://github.com/radian-software/straight.el">straight</a>'s very liberal use of symlinks. Though I'm still a little
surprised at VC kicking in when reading the config.
</p>

<p>
Anyway, there are two variables to consider, <code>vc-follow-symlinks</code> and
<code>vc-handled-backends</code>. I opted to modify the latter one, and since I don't use
VC at all I'm turning it off completely.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">setopt</span> vc-handled-backends nil<span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://magnus.therning.org/2024-08-11-removing-symlink-question.html</link>
  <guid>https://magnus.therning.org/2024-08-11-removing-symlink-question.html</guid>
  <pubDate>Sun, 11 Aug 2024 08:41:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Emacs via Nix with mu4e]]></title>
  <description><![CDATA[
<p>
I've been running development versions of Emacs ever since I switched to Wayland
and needed the PGTK code. The various <code>X-git</code> packages on <a href="https://aur.archlinux.org/">AUR</a> makes that easy,
as long as one doesn't mind building the packages locally, and regularly.
Building a large package like Emacs does get a bit tiring after a while though
so I started looking at the <a href="https://github.com/nix-community/emacs-overlay">emacs overlay</a> to see if I could keep up without
building quite that much.
</p>

<p>
The first attempt at this failed as I couldn't get my email setup working; emacs
simply refused to find the locally installed <code>mu4e</code> package. I felt I didn't
have time to solve it at the time, reverted back to doing the builds myself
again. It kept irritating me though, and today I made another attempt. This time
I invested a bit more time in reading up on how to install emacs via Nix with
packages. Something that paid off.
</p>

<p>
I'm managing my packages using <a href="https://nix.dev/manual/nix/2.23/command-ref/new-cli/nix3-profile.html">nix profile</a> and a <code>flake.nix</code>. To install emacs
with a working <code>mu4e</code> I started with adding the emacs overlay to the inputs
</p>

<div class="org-src-container">
<pre class="src src-nix"><span class="org-nix-attribute">inputs</span> = <span class="org-rainbow-delimiters-depth-1">{</span>
  <span class="org-nix-attribute">nixpkgs.url</span> = <span class="org-string">"github:nixos/nixpkgs?ref=nixpkgs-unstable"</span>;
  ...
  <span class="org-nix-attribute">community-emacs.url</span> = <span class="org-string">"github:nix-community/emacs-overlay"</span>;
<span class="org-rainbow-delimiters-depth-1">}</span>;
</pre>
</div>

<p>
and in my outputs I made sure to use the overlay on <code>nixpkgs</code>
</p>

<div class="org-src-container">
<pre class="src src-nix"><span class="org-nix-attribute">outputs</span> = inputs@<span class="org-rainbow-delimiters-depth-1">{</span> nixpkgs, community-emacs, ... <span class="org-rainbow-delimiters-depth-1">}</span>:
  <span class="org-nix-keyword">let</span>
    <span class="org-nix-attribute">system</span> = <span class="org-string">"x86_64-linux"</span>;
    <span class="org-nix-attribute">pkgs</span> = <span class="org-nix-builtin">import</span> nixpkgs <span class="org-rainbow-delimiters-depth-1">{</span>
      <span class="org-nix-keyword">inherit</span> system;
      <span class="org-nix-attribute">overlays</span> = <span class="org-rainbow-delimiters-depth-2">[</span> community-emacs.overlays.emacs <span class="org-rainbow-delimiters-depth-2">]</span>;
    <span class="org-rainbow-delimiters-depth-1">}</span>;
    ...
</pre>
</div>

<p>
and in the list of packages passed to <code>pkgs.buildEnv</code> I added
</p>

<div class="org-src-container">
<pre class="src src-nix">...
<span class="org-rainbow-delimiters-depth-1">(</span><span class="org-rainbow-delimiters-depth-2">(</span>emacsPackagesFor emacs-pgtk<span class="org-rainbow-delimiters-depth-2">)</span>.emacsWithPackages
  <span class="org-rainbow-delimiters-depth-2">(</span>epkgs: <span class="org-rainbow-delimiters-depth-3">[</span> epkgs.mu4e <span class="org-rainbow-delimiters-depth-3">]</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
mu
...
</pre>
</div>

<p>
That's all there's to it. After running <code>nix profile update 0</code> I had a build of
emacs with Wayland support that's less than a day old, all downloaded from the
community cache. Perfect!
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-nix.html">nix</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[nix]]></category>
  <link>https://magnus.therning.org/2024-07-21-emacs-via-nix-with-mu4e.html</link>
  <guid>https://magnus.therning.org/2024-07-21-emacs-via-nix-with-mu4e.html</guid>
  <pubDate>Sun, 21 Jul 2024 01:04:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[A function for jumping to a project TODO file]]></title>
  <description><![CDATA[
<p>
I've had <a href="https://melpa.org/#/org-projectile">org-projectile</a> in my config since the beginning, and while it's worked
nicely for me in my main config it gave me some grief when I played around with
<a href="https://github.com/progfolio/elpaca">elpaca</a> the other week.<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>
</p>

<p>
I tried to get the install instructions to work, but kept on getting errors when
loading my config. Given that I only use it for one thing, to open the file
<code>TODO.org</code> in the current project's root, I decided to just write a function for
doing that instead.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">mep-projectile-open-todo</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-doc">"Open the project's todo file."</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">interactive</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">if-let*</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>proj-dir <span class="org-rainbow-delimiters-depth-5">(</span>projectile-project-root<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
            <span class="org-rainbow-delimiters-depth-4">(</span>proj-todo-file <span class="org-rainbow-delimiters-depth-5">(</span>f-join proj-dir <span class="org-string">"</span><span class="org-string"><span class="org-hl-todo"><span class="custom">TODO</span></span></span><span class="org-string">.org"</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
      <span class="org-rainbow-delimiters-depth-3">(</span>org-open-file proj-todo-file<span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>message <span class="org-string">"Not in a project"</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
This was the second time I gave up on using it instead of <a href="https://github.com/radian-software/straight.el">straight</a>, but
that's another story.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-org-mode.html">org-mode</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[org-mode]]></category>
  <link>https://magnus.therning.org/2024-07-13-a-function-for-jumping-to-a-project-todo-file.html</link>
  <guid>https://magnus.therning.org/2024-07-13-a-function-for-jumping-to-a-project-todo-file.html</guid>
  <pubDate>Sat, 13 Jul 2024 10:24:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Orderless completion in lsp-mode]]></title>
  <description><![CDATA[
<p>
If you, like me, are using <a href="https://github.com/minad/corfu"><i>corfu</i></a> to get in-buffer completion and extend it
with <a href="https://github.com/oantolin/orderless"><i>orderless</i></a> to make it even more powerful, you might have noticed that you
lose the orderless style as soon as you enter <a href="https://emacs-lsp.github.io/lsp-mode/"><i>lsp-mode</i></a>.
</p>

<p>
My setup of <i>orderless</i> looks like this
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">use-package</span> <span class="org-constant">orderless</span>
  <span class="org-builtin">:custom</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>orderless-matching-styles '<span class="org-rainbow-delimiters-depth-3">(</span>orderless-literal orderless-regexp orderless-flex<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>completion-styles '<span class="org-rainbow-delimiters-depth-3">(</span>orderless partial-completion basic<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>completion-category-defaults nil<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>completion-category-overrides '<span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>file <span class="org-rainbow-delimiters-depth-5">(</span>styles partial-completion<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
which basically turns on orderless style for all things except when completing
filenames.
</p>

<p>
It turns out that <i>lsp-mode</i> messes around with <code>completion-category-defaults</code>
and when entering <code>lsp-mode</code> <a href="https://github.com/emacs-lsp/lsp-mode/blob/b27d9db1e75d40ea5e1362386e9a6e66fa3b1bae/lsp-completion.el#L790">this code here</a> adds a setting for <code>'lsp-capf</code>.
Unfortunately there seems to be no way to prevent <i>lsp-mode</i> from doing this so
the only option is to fix it up afterwards. Luckily there's a hook for running
code after the completion for <i>lsp-mode</i> is set up, <code>lsp-completion-mode-hook</code>.
Adding the following function to it makes sure I now get to enjoy <i>orderless</i>
also when writing code.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">lambda</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">setq-local</span> completion-category-defaults
              <span class="org-rainbow-delimiters-depth-3">(</span>assoc-delete-all 'lsp-capf completion-category-defaults<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-lsp.html">lsp</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[lsp]]></category>
  <link>https://magnus.therning.org/2024-05-04-orderless-completion-in-lsp-mode.html</link>
  <guid>https://magnus.therning.org/2024-05-04-orderless-completion-in-lsp-mode.html</guid>
  <pubDate>Sat, 04 May 2024 06:49:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Making Emacs without terminal emulator a little more usable]]></title>
  <description><![CDATA[
<p>
After reading Andrey Listopadov's <a href="https://andreyor.st/posts/2023-10-27-you-dont-need-a-terminal-emulator/">You don't need a terminal emulator</a> (mentioned
at <a href="https://irreal.org/blog/?p=11746">Irreal</a> too) I decided to give up on using Emacs as a terminal for my shell.
In <i>my experience</i> Emacs simply isn't a very good terminal to run a shell in
anyway. I removed the almost completely unused <a href="https://github.com/kyagi/shell-pop-el">shell-pop</a> from my configuration
and the keybinding with a binding to <code>async-shell-command</code>. I'm keeping
<a href="https://github.com/davidshepherd7/terminal-here">terminal-here</a> in my config for the time being though.
</p>

<p>
I realised <a href="https://github.com/bbatsov/projectile">projectile</a> didn't have a function for running it in the root of a
project, so I wrote one heavily based on <code>project-async-shell-command</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">mep-projectile-async-shell-command</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-doc">"Run `</span><span class="org-doc"><span class="org-constant">async-shell-command</span></span><span class="org-doc">' in the current project's root directory."</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">declare</span> <span class="org-rainbow-delimiters-depth-3">(</span>interactive-only async-shell-command<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">interactive</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">let</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>default-directory <span class="org-rainbow-delimiters-depth-5">(</span>projectile-project-root<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>call-interactively #'async-shell-command<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
I quickly found that the completion offered by Emacs for <code>shell-command</code> and
<code>async-shell-command</code> is far from as sophisticated as what I'm used to from Z
shell. After a bit of searching I found <a href="https://github.com/szermatt/emacs-bash-completion">emacs-bash-completion</a>. Bash isn't my
shell of choice, partly because I've found the completion to not be as good as
in Z shell, but it's an improvement over what stock Emacs offers. The
instructions in the repo was good, but had to be adjusted slightly:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">use-package</span> <span class="org-constant">bash-completion</span>
  <span class="org-builtin">:straight</span> <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-builtin">:host</span> github
             <span class="org-builtin">:repo</span> <span class="org-string">"szermatt/emacs-bash-completion"</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-builtin">:config</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>add-hook 'shell-dynamic-complete-functions 'bash-completion-dynamic-complete<span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
I just wish I'll find a package offering completions reaching Z shell levels.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://magnus.therning.org/2023-11-19-making-emacs-without-terminal-emulator-a-little-more-usable.html</link>
  <guid>https://magnus.therning.org/2023-11-19-making-emacs-without-terminal-emulator-a-little-more-usable.html</guid>
  <pubDate>Sun, 19 Nov 2023 08:50:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Using the golang mode shipped with Emacs]]></title>
  <description><![CDATA[
<p>
A few weeks ago I wanted to try out tree-sitter and switched a few of the modes
I use for coding to their <code>-ts-mode</code> variants. Based on the excellent <a href="https://www.masteringemacs.org/article/how-to-get-started-tree-sitter">How to Get
Started with Tree-Sitter</a> I added bits like this to the setup I have for coding
modes:<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">use-package</span> <span class="org-constant">X-mode</span>
  <span class="org-builtin">:init</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>add-to-list 'treesit-language-source-alist '<span class="org-rainbow-delimiters-depth-3">(</span>X <span class="org-string">"https://github.com/tree-sitter/tree-sitter-X"</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-comment-delimiter">;; </span><span class="org-comment">(treesit-install-language-grammar 'X)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>add-to-list 'major-mode-remap-alist '<span class="org-rainbow-delimiters-depth-3">(</span>X-mode . X-ts-mode<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-comment-delimiter">;; </span><span class="org-comment">...</span>
  <span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
I then manually evaluated the expression that's commented out to download and
compile the tree-sitter grammar. It's a rather small change, it works, and I can
switch over language by language. I swapped a couple of languages to the
tree-sitter modes like this, including golang. The only mode that I noticed
changes in was golang, in particular my adding of <code>gofmt-before-save</code> to
<code>before-save-hook</code> had stopped having any effect.
</p>

<p>
What I hadn't realised was that the <a href="https://github.com/dominikh/go-mode.el"><code>go-mode</code> I was using</a> didn't ship with Emacs
and that when I switched to <code>go-ts-mode</code> I switched to one that was. It turns
out that <code>gofmt-before-save</code> is hard-wired to work only in <code>go-mode</code>,
something others have <a href="https://github.com/dominikh/go-mode.el/issues/396#issuecomment-1366716882">noticed</a>.
</p>

<p>
I don't feel like waiting for <code>go-mode</code> to fix that though, especially not when
there's a perfectly fine golang mode shipping with Emacs now, and not when
<a href="https://github.com/purcell/emacs-reformatter">emacs-reformatter</a> make it so easy to define formatters (as I've <a href="https://magnus.therning.org/2023-09-24-defining-a-formatter-for-cabal-files.html">written about
before</a>).
</p>

<p>
My golang setup, sans keybindings, now looks like this:<sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">use-package</span> <span class="org-constant">go-ts-mode</span>
  <span class="org-builtin">:hook</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>go-ts-mode . lsp-deferred<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>go-ts-mode . go-format-on-save-mode<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-builtin">:init</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>add-to-list 'treesit-language-source-alist '<span class="org-rainbow-delimiters-depth-3">(</span>go <span class="org-string">"https://github.com/tree-sitter/tree-sitter-go"</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>add-to-list 'treesit-language-source-alist '<span class="org-rainbow-delimiters-depth-3">(</span>gomod <span class="org-string">"https://github.com/camdencheek/tree-sitter-go-mod"</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-comment-delimiter">;; </span><span class="org-comment">(dolist (lang '(go gomod)) (treesit-install-language-grammar lang))</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>add-to-list 'auto-mode-alist '<span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"\\.go\\'"</span> . go-ts-mode<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>add-to-list 'auto-mode-alist '<span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"/go\\.mod\\'"</span> . go-mod-ts-mode<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-builtin">:config</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">reformatter-define</span> go-format
    <span class="org-builtin">:program</span> <span class="org-string">"goimports"</span>
    <span class="org-builtin">:args</span> '<span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"/dev/stdin"</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-builtin">:general</span>
  <span class="org-comment-delimiter">;; </span><span class="org-comment">...</span>
  <span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
So far I'm happy with the built-in <code>go-ts-mode</code> and I've got to say that using a
minor mode for the format-on-save functionality is more elegant than adding a
function to <code>before-save-hook</code> (something that <code>go-mode</code> may get through this
<a href="https://github.com/dominikh/go-mode.el/pull/426">PR</a>).
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
There were a few more things that I needed to modify. As the tree-sitter
modes are completely separate from the non-tree-sitter modes things like hooks
and keybindings in the modes' keymaps.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
The full file is <a href="https://gitlab.com/magus/mes/-/blob/main/lisp/mes-dev-go.el">here</a>.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-tree-sitter.html">tree-sitter</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[tree-sitter]]></category>
  <link>https://magnus.therning.org/2023-11-16-using-the-golang-mode-shipped-with-emacs.html</link>
  <guid>https://magnus.therning.org/2023-11-16-using-the-golang-mode-shipped-with-emacs.html</guid>
  <pubDate>Thu, 16 Nov 2023 07:02:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[How I use Emacs]]></title>
  <description><![CDATA[
<p>
I've recently written <a href="https://magnus.therning.org/2023-09-10-using-emacs-for-the-scrollback-in-terminal-multiplexers.html">two</a> <a href="https://magnus.therning.org/2023-09-30-using-emacs-as-$editor.html">posts</a> about my attempts to use a slimmed down Emacs
setup for some very specific use cases. I'be put both posts on Reddit, <a href="https://www.reddit.com/r/emacs/comments/16f7rbn/using_emacs_for_the_scrollback_in_terminal/">here</a> and
<a href="https://www.reddit.com/r/emacs/comments/16w9bvh/using_emacs_as_editor/">here</a>, and in both cases the majority of comments have been telling me that I
should use <code>emacsclient</code>. I know they have good intentions &#x2013; they want to share
insight they've gained and benefit from on a daily basis. However, no matter how
many Emacs devotees point out the benefits of <code>emacsclient</code> I'm not about to
start using it. This post is an attempt to answer why that is.
</p>

<p>
Up front I want to clarify a few things:
</p>

<ol class="org-ol">
<li>Yes, I know how to use <code>emacsclient</code>, and</li>
<li>yes, I know it is a good way to, in a way, improve Emacs startup time,<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> and</li>
<li>yes, I know how to turn on <code>server-mode</code> in Emacs, and finally</li>
<li>yes, I know how to run Emacs using a user unit for SystemD.</li>
</ol>

<p>
With that out of the way, here are the two ways I use Emacs
</p>

<ol class="org-ol">
<li>As my starting point for work, i.e. writing code, keeping notes, tracking
time, and writing my daily work journal.</li>
<li>As my editor of ephemeral files.<sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup></li>
</ol>

<p>
The next two sections explain more about these two distinct ways I use Emacs
</p>
<div id="outline-container-org06ef619" class="outline-2">
<h2 id="org06ef619">As my starting point for work</h2>
<div class="outline-text-2" id="text-org06ef619">
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">Number of packages</td>
<td class="org-left">162</td>
</tr>

<tr>
<td class="org-left">Init time (<code>emacs-init-time</code>)</td>
<td class="org-left">1.883483s</td>
</tr>

<tr>
<td class="org-left">Config size (by <code>du -bch</code>)</td>
<td class="org-left">68K</td>
</tr>
</tbody>
</table>

<p>
Much of what I do on a daily basis starts in Emacs. I typically have one
instance of Emacs open and I always keep it on the second virtual desktop. I
always run it in the GUI. When I write code I start with opening a new tab, then
I open a <code>dired</code> buffer in the project's folder (by using <code>consult-projectile</code>).
When I need a terminal I open it from Emacs using on of
<code>terminal-here-project-launch</code> or <code>terminal-here</code>. Occasionally I open a shell
prompt inside Emacs using <code>shell-pop</code>.
</p>

<p>
Back when I used Vim as my main editor I <i>always</i> started a terminal first and
then opened files from there. Since switching to Emacs I've completely stopped
doing that. Over the last 8 or so years of Emacs usage there's only been a
handful of times when I've wanted to open a file from the terminal and I've run
<code>M-x server-start</code> and used <code>emacsclient</code>. The last time was more than a year
ago.
</p>

<p>
As I typically keep exactly one Emacs open, and I start it soon after logging
in, I'm not too concerned with startup time. I think under 2s is more than fast
enough given the functionality I have in my setup.
</p>

<p>
This setup I use for taking notes and writing my daily work journal, as well as
reading email, and programming in a half-dozen languages. I have a large-ish set
of keybindings that I've set up using <a href="https://github.com/noctuid/general.el">general.el</a>, inspired by Spacemacs at first
but by now it's started to gain its own character.
</p>
</div>
</div>
<div id="outline-container-org9ecf44f" class="outline-2">
<h2 id="org9ecf44f">As my editor of ephemeral files (<code>$EDITOR</code>)</h2>
<div class="outline-text-2" id="text-org9ecf44f">
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">Number of packages</td>
<td class="org-left">22</td>
</tr>

<tr>
<td class="org-left">Init time (<code>emacs-init-time</code>)</td>
<td class="org-left">0.209298s</td>
</tr>

<tr>
<td class="org-left">Config size (by <code>du -bch</code>)</td>
<td class="org-left">6.7K</td>
</tr>
</tbody>
</table>

<p>
Ephemeral files are files I tend to edit for less than 30 seconds, maybe a
minute at most. There are three main use cases for ephemeral files:
</p>

<ol class="org-ol">
<li>Searching the scrollback buffer in <a href="https://zellij.dev/">zellij</a>, and copying bits to the clipboard
for various uses.</li>
<li>Editing files when running <code>git</code> from the command line. It's not something I
do very often, but it happens.</li>
<li>Editing shell commands. When they get a little too large to handle
conveniently using ZSH directly I invoke <code>edit-command-line</code>.</li>
</ol>

<p>
For a few reasons I decided to make a second, completely separate configuration
just to handle ephemeral files.
</p>

<ul class="org-ul">
<li>It will only be used in a terminal.</li>
<li>I want to be able to have some special keybindings that suit a specific use,
e.g. for the scrollback buffer I've bound `SPC Y` to copy the selected text to
the clipboard and then exit Emacs. It's a thing that I use all the time with
the scrollback buffer, but never otherwise.</li>
<li>I have no need, nor any desire, to switch from editing a commit message, or
searching a scrollback buffer, to reading email or editing an org-mode file.
The complete separation is a feature.</li>
</ul>

<p>
With a startup time of less than a quarter of a second it is well within the
acceptable, and there is absolutely no need to use <code>emacsclient</code> just to speed
things up. Given my desire for separation, I wouldn't want to use my main Emacs
instance as a server and edit ephemeral files anyway.
</p>
</div>
</div>
<div id="outline-container-orgcadf982" class="outline-2">
<h2 id="orgcadf982">Conclusion</h2>
<div class="outline-text-2" id="text-orgcadf982">
<p>
I've found a setup that seems to work really well and tick all the requirements
I have when it comes to separation between use cases and ability to have custom
keybindings for them. Also, Emacs is starting up <i>very</i> fast with my slimmed
down configuration. If starting Emacs with the slimmed configuration starts
taking too long I'm more likely to go back to using Neovim than complicate
things with <code>emacsclient</code>.
</p>

<p>
So no, I am not going to start using <code>emacsclient</code> any time soon.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
I write "in a way" as it actually does nothing for Emacs startup time, it
just shifts it to a point in time so you don't have to sit and wait for it to
start.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
I used to use <a href="https://neovim.io/">Neovim</a>, without any config, for most of this until recently.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://magnus.therning.org/2023-10-01-how-i-use-emacs.html</link>
  <guid>https://magnus.therning.org/2023-10-01-how-i-use-emacs.html</guid>
  <pubDate>Sun, 01 Oct 2023 07:13:00 +0200</pubDate>
</item>
</channel>
</rss>
