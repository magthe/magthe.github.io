<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title><![CDATA[Magnus web site - amazonka]]></title>
<description><![CDATA[Magnus web site - amazonka]]></description>
<link>https://magnus.therning.org//tag-amazonka.html</link>
<lastBuildDate>Sun, 14 Mar 2021 07:55:27 +0100</lastBuildDate>
<item>
  <title><![CDATA[Combining Amazonka and Conduit]]></title>
  <description><![CDATA[
<p>
Combining <a href="https://hackage.haskell.org/package/amazonka">amazonka</a> and <a href="https://hackage.haskell.org/package/conduit">conduit</a> turned out to be easier than I had expected.
</p>

<p>
Here's an SNS sink I put together today
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">snsSink</span> <span class="org-haskell-operator">::</span> <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">MonadAWS</span> m, <span class="org-haskell-type">MonadIO</span> m<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">=&gt;</span> <span class="org-haskell-type">T.Text</span> <span class="org-haskell-operator">-&gt;</span> <span class="org-haskell-type">C.ConduitT</span> <span class="org-haskell-type">Value</span> <span class="org-haskell-type">C.Void</span> m <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
<span class="org-haskell-definition">snsSink</span> topic <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
  C.await <span class="org-haskell-operator">&gt;&gt;=</span> <span class="org-haskell-operator">\</span><span class="org-haskell-keyword">case</span>
    <span class="org-haskell-constructor">Nothing</span> <span class="org-haskell-operator">-&gt;</span> pure <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
    <span class="org-haskell-constructor">Just</span> msg <span class="org-haskell-operator">-&gt;</span> <span class="org-haskell-keyword">do</span>
      <span class="org-haskell-keyword">_</span> <span class="org-haskell-operator">&lt;-</span> C.lift <span class="org-haskell-operator">$</span> publishSNS topic <span class="org-rainbow-delimiters-depth-1">(</span>TL.toStrict <span class="org-haskell-operator">$</span> TL.decodeUtf8 <span class="org-haskell-operator">$</span> encode msg<span class="org-rainbow-delimiters-depth-1">)</span>
      snsSink topic
</pre>
</div>

<p>
Putting it to use can be done with something like
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">foo</span> <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
  <span class="org-haskell-operator">...</span>
  awsEnv <span class="org-haskell-operator">&lt;-</span> newEnv <span class="org-haskell-constructor">Discover</span>
  runAWSCond awsEnv <span class="org-haskell-operator">$</span>
    <span class="org-haskell-operator">&lt;</span>source producing <span class="org-haskell-constructor">Value</span><span class="org-haskell-operator">&gt;</span> <span class="org-haskell-operator">.|</span> snsSink topicArn

  <span class="org-haskell-keyword">where</span>
    runAWSCond awsEnv <span class="org-haskell-operator">=</span> runResourceT <span class="org-haskell-operator">.</span> runAWS awsEnv <span class="org-haskell-operator">.</span> within <span class="org-haskell-constructor">Frankfurt</span> <span class="org-haskell-operator">.</span> C.runConduit
</pre>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-amazonka.html">amazonka</a> <a href="https://magnus.therning.org/tag-aws.html">aws</a> <a href="https://magnus.therning.org/tag-conduit.html">conduit</a> <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> </div>]]></description>
  <category><![CDATA[amazonka]]></category>
  <category><![CDATA[aws]]></category>
  <category><![CDATA[conduit]]></category>
  <category><![CDATA[haskell]]></category>
  <link>https://magnus.therning.org/2020-11-11-2222-combining_amazonka_and_conduit.html</link>
  <pubDate>Wed, 11 Nov 2020 22:22:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Using stack to get around upstream bugs]]></title>
  <description><![CDATA[
<p>
Recently I bumped into <a href="https://github.com/brendanhay/amazonka/issues/517">a bug in <i>amazonka</i></a>.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> I can't really sit around
waiting for Amazon to fix it, and then for <i>amazonka</i> to use the fixed
documentation to generate the code and make another release.
</p>

<p>
Luckily <a href="https://docs.haskellstack.org/en/stable/README/"><code>stack</code></a> contains features that make it fairly simple to work around this
bug until it's properly fixed. Here's how.
</p>

<ol class="org-ol">
<li>Put the upstream code in a git repository of your own. In my case I simply
forked the <a href="https://github.com/brendanhay/amazonka"><i>amazonka</i> repository on github</a> (my fork is <a href="https://github.com/magthe/amazonka">here</a>).</li>

<li>Fix the bug and commit the change. <a href="https://github.com/magthe/amazonka/commit/1543b65e3a8b692aa9038ada68aaed9967752983">My change to <i>amazonka-codepipeline</i></a> was
simply to remove the missing fields &#x2013; it was easier than trying to make them
optional (i.e. wrapping them in =Maybe=s).</li>

<li>Tell <code>slack</code> to use the code from your modified git repository. In my case I
added the following to my <code>slack.yaml</code>:</li>
</ol>

<pre class="example" id="org3a0d6eb">
extra-deps:
  - github: magthe/amazonka
    commit: 1543b65e3a8b692aa9038ada68aaed9967752983
    subdirs:
      - amazonka-codepipeline
</pre>

<p>
That's it!
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
The guilty party is Amazon, not <i>amazonka</i>, though I was a little
surprised that there doesn't seem to be any established way to modify the Amazon
API documentation before it's used to autogenerate the Haskell code.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-amazonka.html">amazonka</a> <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-stack.html">stack</a> </div>]]></description>
  <category><![CDATA[amazonka]]></category>
  <category><![CDATA[haskell]]></category>
  <category><![CDATA[stack]]></category>
  <link>https://magnus.therning.org/2019-02-10-000-using-stack-to-get-around-upstream-bugs.html</link>
  <pubDate>Sun, 10 Feb 2019 12:34:00 +0100</pubDate>
</item>
</channel>
</rss>
