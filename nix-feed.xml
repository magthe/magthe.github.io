<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title><![CDATA[Magnus web site - nix]]></title>
<description><![CDATA[Magnus web site - nix]]></description>
<link>https://magnus.therning.org//tag-nix.html</link>
<lastBuildDate>Sun, 14 Mar 2021 07:55:26 +0100</lastBuildDate>
<item>
  <title><![CDATA[Haskell, Nix and using packages from GitHub]]></title>
  <description><![CDATA[
<p>
The other day I bumped into what turned out to be a <a href="https://mail.haskell.org/pipermail/haskell-cafe/2020-November/133021.html">bug in Amazonka</a> where
sockets weren't closed in a timely fashion and thus the process ran out of file
descriptors. Some more digging and an <a href="https://github.com/brendanhay/amazonka/issues/608">issue</a> later I found that a fix most likely
already in place (mine was possibly a duplicate of an older <a href="https://github.com/brendanhay/amazonka/issues/490">issue</a>). Now I only
had to verify if that was the case by using the most recent, and unreleased code
on the <code>develop</code> branch of Amazonka.
</p>

<p>
My first thought was to attempt to instruct Cabal to build the bits of Amazonka
I need by putting a few <a href="https://cabal.readthedocs.io/en/3.4/cabal-project.html#specifying-packages-from-remote-version-control-locations"><code>source-repository-package</code> stanzas</a> in my config. That
quickly started to look like a bit of a rabbit hole, so I decided to use Nix
instead. After finding the <a href="https://stackoverflow.com/questions/54810851/how-can-i-build-a-haskell-dependency-from-a-github-source-nix-file-using-nix">perfect SO post</a> and looking up yet again how to do
overrides for Haskell I ran <code>cabal2nix</code> for the three packages I need:
</p>

<div class="org-src-container">
<pre class="src src-shell">cabal2nix --no-haddock --no-check --subpath amazonka <span class="org-sh-escaped-newline">\</span>
  git://github.com/brendanhay/amazonka.git &gt; amazonka.nix
cabal2nix --no-haddock --no-check --subpath core <span class="org-sh-escaped-newline">\</span>
  git://github.com/brendanhay/amazonka.git &gt; amazonka-core.nix
cabal2nix --no-haddock --no-check --subpath amazonka-sqs <span class="org-sh-escaped-newline">\</span>
  git://github.com/brendanhay/amazonka.git &gt; amazonka-sqs.nix
</pre>
</div>

<p>
The relevant part of the old Nix expression looked like this:
</p>

<div class="org-src-container">
<pre class="src src-nix"><span class="org-nix-attribute">thePkg</span> = haskellPackages.developPackage <span class="org-rainbow-delimiters-depth-1">{</span>
  <span class="org-nix-attribute">root</span> = lib.cleanSource <span class="org-nix-constant">./.</span>;
  <span class="org-nix-attribute">name</span> = name;

  <span class="org-nix-attribute">modifier</span> = <span class="org-rainbow-delimiters-depth-2">(</span>t.flip t.pipe<span class="org-rainbow-delimiters-depth-2">)</span>
    <span class="org-rainbow-delimiters-depth-2">[</span>hl.dontHaddock
     hl.enableStaticLibraries
     hl.justStaticExecutables
     hl.disableLibraryProfiling
     hl.disableExecutableProfiling<span class="org-rainbow-delimiters-depth-2">]</span>;
<span class="org-rainbow-delimiters-depth-1">}</span>;
</pre>
</div>

<p>
After adding the overrides it looked like this
</p>

<div class="org-src-container">
<pre class="src src-nix"><span class="org-nix-attribute">hp</span> = haskellPackages.override <span class="org-rainbow-delimiters-depth-1">{</span>
  <span class="org-nix-attribute">overrides</span> = self: super: <span class="org-rainbow-delimiters-depth-2">{</span>
    <span class="org-nix-attribute">amazonka-core</span> = self.callPackage <span class="org-nix-constant">./amazonka-core.nix</span> <span class="org-rainbow-delimiters-depth-3">{}</span>;
    <span class="org-nix-attribute">amazonka</span> = self.callPackage <span class="org-nix-constant">./amazonka.nix</span> <span class="org-rainbow-delimiters-depth-3">{}</span>;
    <span class="org-nix-attribute">amazonka-sqs</span> = self.callPackage <span class="org-nix-constant">./amazonka-sqs.nix</span> <span class="org-rainbow-delimiters-depth-3">{}</span>;
  <span class="org-rainbow-delimiters-depth-2">}</span>;
<span class="org-rainbow-delimiters-depth-1">}</span>;

<span class="org-nix-attribute">thePkg</span> = hp.developPackage <span class="org-rainbow-delimiters-depth-1">{</span>
  <span class="org-nix-attribute">root</span> = lib.cleanSource <span class="org-nix-constant">./.</span>;
  <span class="org-nix-attribute">name</span> = name;

  <span class="org-nix-attribute">modifier</span> = <span class="org-rainbow-delimiters-depth-2">(</span>t.flip t.pipe<span class="org-rainbow-delimiters-depth-2">)</span>
    <span class="org-rainbow-delimiters-depth-2">[</span>hl.dontHaddock
     hl.enableStaticLibraries
     hl.justStaticExecutables
     hl.disableLibraryProfiling
     hl.disableExecutableProfiling<span class="org-rainbow-delimiters-depth-2">]</span>;
<span class="org-rainbow-delimiters-depth-1">}</span>;
</pre>
</div>

<p>
After a somewhat longer-than-usual build I could verify that I had indeed bumped
into the same issue and my issue was a duplicate.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-nix.html">nix</a> </div>]]></description>
  <category><![CDATA[haskell]]></category>
  <category><![CDATA[nix]]></category>
  <link>https://magnus.therning.org/2020-11-30-1734-haskell__nix_and_using_packages_from_github.html</link>
  <pubDate>Mon, 30 Nov 2020 17:34:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Better Nix setup for Spacemacs]]></title>
  <description><![CDATA[
<p>
In an <a href="2019-12-07-000-nix-setup-for-spacemacs.html">earlier post</a> I documented my setup for getting <a href="https://www.spacemacs.org/">Spacemacs</a>/Emacs to work
with <a href="https://nixos.org/nix/">Nix</a>. I've since found a much more elegant solution based on
</p>

<ul class="org-ul">
<li><a href="https://github.com/direnv/direnv/">direnv</a>, and</li>
<li><a href="https://github.com/wbolster/emacs-direnv">emacs-direnv</a></li>
</ul>

<p>
No more Emacs packages for Nix and no need to defining functions that wrap
executables in an invocation of <code>nix-shell</code>.
</p>

<p>
There's a nice bonus too, with this setup I don't need to run <code>nix-shell</code>, which
always drops me at a bash prompt, instead I get a working setup in my shell of
choice.
</p>

<div id="outline-container-orgd063368" class="outline-2">
<h2 id="orgd063368">Setting up <code>direnv</code></h2>
<div class="outline-text-2" id="text-orgd063368">
<p>
The steps for setting up <code>direnv</code> depends a bit on your setup, but luckily I
found the <a href="https://direnv.net/#basic-installation">official instructions for installing <code>direnv</code></a> to be very clear and
easy to follow. There's not much I can add to that.
</p>
</div>
</div>

<div id="outline-container-org9ce9cc2" class="outline-2">
<h2 id="org9ce9cc2">Setting up Spacemacs</h2>
<div class="outline-text-2" id="text-org9ce9cc2">
<p>
Since <code>emacs-direnv</code> isn't included by default in Spacemacs I needed to do a bit
of setup. I opted to create a layer for it, rather than just drop it in the list
<code>dotspacemacs-additional-packages</code>. Yes, a little more complicated, but not
difficult and I nurture an intention of submitting the layer for inclusion in
Spacemacs itself at some point. I'll see where that goes.
</p>

<p>
For now, I put the following in the file
<code>~/.emacs.d/private/layers/direnv/packages.el</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defconst</span> <span class="org-variable-name">direnv-packages</span>
      '<span class="org-rainbow-delimiters-depth-2">(</span>direnv<span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>

<span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">direnv/init-direnv</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">use-package</span> <span class="org-constant">direnv</span>
    <span class="org-builtin">:init</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>direnv-mode<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org6002225" class="outline-2">
<h2 id="org6002225">Setting up the project folders</h2>
<div class="outline-text-2" id="text-org6002225">
<p>
In each project folder I then add the file <code>.envrc</code> containing a single line:
</p>

<div class="org-src-container">
<pre class="src src-shell">use_nix
</pre>
</div>

<p>
Then I either run <code>direnv allow</code> from the command line, or run the
function <code>direnv-allow</code> after opening the folder in Emacs.
</p>
</div>
</div>

<div id="outline-container-orgbcb33a0" class="outline-2">
<h2 id="orgbcb33a0">Using it</h2>
<div class="outline-text-2" id="text-orgbcb33a0">
<p>
It's as simple as moving into the folder in a shell &#x2013; all required envvars are
set up on entry and unset on exit.
</p>

<p>
In Emacs it's just as simple, just open a file in a project and the envvars are
set. When switching to a buffer outside the project the envvars are unset.
</p>

<p>
There is only one little caveat, <code>nix-build</code> doesn't work inside a Nix shell. I
found out that running
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="org-variable-name">IN_NIX_SHELL</span>= nix-build
</pre>
</div>

<p>
does work though.
</p>
</div>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-nix.html">nix</a> <a href="https://magnus.therning.org/tag-spacemacs.html">spacemacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[nix]]></category>
  <category><![CDATA[spacemacs]]></category>
  <link>https://magnus.therning.org/2020-06-22-000-better-nix-setup-for-spacemacs.html</link>
  <pubDate>Mon, 22 Jun 2020 12:34:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[My ghcide build for Nix]]></title>
  <description><![CDATA[
<p>
I was slightly disappointed to find out that not all packages on Hackage that
are marked as present in <a href="https://nixos.org/nixpkgs/">Nix(pkgs)</a> actually are available. Quite a few of them
are marked broken and hence not installable. One of these packages is <a href="https://hackage.haskell.org/package/ghcide">ghcide</a>.
</p>

<p>
There are of course expressions available for getting a working <code>ghcide</code>
executable installed, like <a href="https://github.com/hercules-ci/ghcide-nix">ghcide-nix</a>. However, since I have rather simple needs
for my Haskell projects I thought I'd play with my own approach to it.
</p>

<p>
What I care about is:
</p>

<ol class="org-ol">
<li>availability of the development tools I use, at the moment it's mainly
<code>ghcide</code> but I'm planning on making use of <a href="https://hackage.haskell.org/package/ormolu">ormolu</a> in the near future</li>
<li>pre-built packages</li>
<li>ease of use</li>
</ol>

<p>
So, I put together <a href="https://github.com/magthe/ghcide-for-nix">ghcide-for-nix</a>. It's basically just a constumized Nixpkgs
where the packages needed to un-break <code>ghcide</code> are present.
</p>

<p>
Usage is a simple <code>import</code> away:
</p>

<div class="org-src-container">
<pre class="src src-nix"><span class="org-nix-builtin">import</span> <span class="org-rainbow-delimiters-depth-1">(</span>builtins.fetchGit <span class="org-rainbow-delimiters-depth-2">{</span>
  <span class="org-nix-attribute">name</span> = <span class="org-string">"ghcide-for-nix"</span>;
  <span class="org-nix-attribute">url</span> = <span class="org-nix-constant">https://github.com/magthe/ghcide-for-nix</span>;
  <span class="org-nix-attribute">rev</span> = <span class="org-string">"927a8caa62cece60d9d66dbdfc62b7738d61d75f"</span>;
<span class="org-rainbow-delimiters-depth-2">}</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
and it'll give you a superset of Nixpkgs. Pre-built packages are available on
<a href="https://magthe.cachix.org/">Cachix</a>.
</p>

<p>
It's not sophisticated, but it's rather easy to use and suffices for my
purposes.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-nix.html">nix</a> </div>]]></description>
  <category><![CDATA[haskell]]></category>
  <category><![CDATA[nix]]></category>
  <link>https://magnus.therning.org/2020-02-02-000-my-ghcide-build-for-nix.html</link>
  <pubDate>Sun, 02 Feb 2020 12:00:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Nix setup for Spacemacs]]></title>
  <description><![CDATA[
<p>
<i>Edit 2020-06-22: I've since found a <a href="2020-06-22-000-better-nix-setup-for-spacemacs.html">better setup for this</a>.</i>
</p>

<p>
When using <code>ghcide</code> and LSP, as I wrote about in my post on <a href="2019-09-19-000-haskell--ghcide--and-spacemacs.html">Haskell, ghcide, and
Spacemacs</a>, I found myself ending up recompiling a little too often. This pushed
me to finally start looking at <a href="https://nixos.org/nix/">Nix</a>. After a bit of a fight I managed to
<a href="https://discourse.nixos.org/t/import-and-use-ghide-nix">get ghcide from Nix</a>,
which brought me the issue of setting up Spacemacs. Inspired by <a href="https://gist.github.com/sevanspowell/23b0135dae2834e59904a502b8a0eb5d">a gist from
Samuel Evans-Powell</a> and a guide to <a href="https://github.com/thalesmg/reflex-skeleton/blob/master/Readme.org#setting-up-editor-integration-with-emacs">setting up an environment for Reflex by
Thales Macedo Garitezi</a> I ended up with the following setup:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">dotspacemacs/layers</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">setq-default</span>
   ...
   dotspacemacs-additional-packages
   '<span class="org-rainbow-delimiters-depth-3">(</span>
     nix-sandbox
     nix-haskell-mode
     ...
     <span class="org-rainbow-delimiters-depth-3">)</span>
   ...
   <span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">dotspacemacs/user-config</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  ...
  <span class="org-rainbow-delimiters-depth-2">(</span>add-hook 'haskell-mode-hook #'lsp<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>add-hook 'haskell-mode-hook 'nix-haskell-mode<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>add-hook 'haskell-mode-hook
            <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">lambda</span> <span class="org-rainbow-delimiters-depth-4">()</span>
              <span class="org-rainbow-delimiters-depth-4">(</span><span class="org-keyword">setq-local</span> flycheck-executable-find
                          <span class="org-rainbow-delimiters-depth-5">(</span><span class="org-keyword">lambda</span> <span class="org-rainbow-delimiters-depth-6">(</span>cmd<span class="org-rainbow-delimiters-depth-6">)</span>
                            <span class="org-rainbow-delimiters-depth-6">(</span>nix-executable-find <span class="org-rainbow-delimiters-depth-7">(</span>nix-current-sandbox<span class="org-rainbow-delimiters-depth-7">)</span> cmd<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
              <span class="org-rainbow-delimiters-depth-4">(</span><span class="org-keyword">setq-local</span> flycheck-command-wrapper-function
                          <span class="org-rainbow-delimiters-depth-5">(</span><span class="org-keyword">lambda</span> <span class="org-rainbow-delimiters-depth-6">(</span>argv<span class="org-rainbow-delimiters-depth-6">)</span>
                            <span class="org-rainbow-delimiters-depth-6">(</span>apply 'nix-shell-command <span class="org-rainbow-delimiters-depth-7">(</span>nix-current-sandbox<span class="org-rainbow-delimiters-depth-7">)</span> argv<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
              <span class="org-rainbow-delimiters-depth-4">(</span><span class="org-keyword">setq-local</span> haskell-process-wrapper-function
                          <span class="org-rainbow-delimiters-depth-5">(</span><span class="org-keyword">lambda</span> <span class="org-rainbow-delimiters-depth-6">(</span>argv<span class="org-rainbow-delimiters-depth-6">)</span>
                            <span class="org-rainbow-delimiters-depth-6">(</span>apply 'nix-shell-command <span class="org-rainbow-delimiters-depth-7">(</span>nix-current-sandbox<span class="org-rainbow-delimiters-depth-7">)</span> argv<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
              <span class="org-rainbow-delimiters-depth-4">(</span><span class="org-keyword">setq-local</span> lsp-haskell-process-wrapper-function
                          <span class="org-rainbow-delimiters-depth-5">(</span><span class="org-keyword">lambda</span> <span class="org-rainbow-delimiters-depth-6">(</span>argv<span class="org-rainbow-delimiters-depth-6">)</span>
                            `<span class="org-rainbow-delimiters-depth-6">(</span><span class="org-string">"nix-shell"</span> <span class="org-string">"-I"</span> <span class="org-string">"."</span> <span class="org-string">"--command"</span> <span class="org-string">"ghcide --lsp"</span> ,<span class="org-rainbow-delimiters-depth-7">(</span>nix-current-sandbox<span class="org-rainbow-delimiters-depth-7">)</span><span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>add-hook 'haskell-mode-hook
            <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">lambda</span> <span class="org-rainbow-delimiters-depth-4">()</span>
              <span class="org-rainbow-delimiters-depth-4">(</span>flycheck-add-next-checker 'lsp-ui '<span class="org-rainbow-delimiters-depth-5">(</span>warning . haskell-stack-ghc<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  ...
  <span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
It seems to work, but please let me know if you have suggestions for
improvements.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-nix.html">nix</a> <a href="https://magnus.therning.org/tag-spacemacs.html">spacemacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[nix]]></category>
  <category><![CDATA[spacemacs]]></category>
  <link>https://magnus.therning.org/2019-12-07-000-nix-setup-for-spacemacs.html</link>
  <pubDate>Sat, 07 Dec 2019 12:34:00 +0100</pubDate>
</item>
</channel>
</rss>
