<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Magnus web site]]></title>
<description><![CDATA[Magnus web site]]></description>
<link>https://magnus.therning.org/</link>
<lastBuildDate>Sat, 09 Jul 2022 22:59:59 +0200</lastBuildDate>
<item>
  <title><![CDATA[Playing with setting up Emacs]]></title>
  <description><![CDATA[
<p>
TL;DR: I've put together a small-ish Emacs configuration that I call <a href="https://gitlab.com/magus/mes">MES</a>.
Hopefully it can be of use to someone out there.
</p>

<div id="outline-container-orgc00253e" class="outline-2">
<h2 id="orgc00253e">My Emacs Setup - MES</h2>
<div class="outline-text-2" id="text-orgc00253e">
<p>
The other day I started watching some videos in the <a href="https://www.youtube.com/watch?v=74zOY-vgkyw&amp;list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ">Emacs From Scratch</a> series
from <a href="https://github.com/SystemCrafters">System Crafters</a>. It looked like something that could be fun to play with so
over the last couple of days I've been tinkering with putting together the
beginnings of a configuration.
</p>

<p>
During the process I realised just how much work it'd be to put together
something that comes close to the polish of <a href="http://spacemacs.org/">Spacemacs</a>, so I've currently no
intention of actually using <i>MES</i> myself. It was fun though, and maybe it can
serve as inspiration (or as a deterrent) for someone else.
</p>

<p>
The major parts are
</p>

<ul class="org-ul">
<li><a href="https://github.com/emacs-evil/evil">evil</a></li>
<li><a href="https://github.com/minad/vertico">vertico</a>/<a href="https://github.com/minad/consult">consult</a>/&#x2026;</li>
<li><a href="https://github.com/noctuid/general.el">general.el</a></li>
<li><a href="https://magit.vc/">magit</a></li>
<li><a href="https://github.com/mclear-tools/tabspaces">tabpspaces</a> (minimal config so I'm not sure it's useful)</li>
<li><a href="https://orgmode.org/">orgmode</a> (only the very basics)</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> ]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://magnus.therning.org/2022-07-09-playing-with-setting-up-emacs.html</link>
  <guid>https://magnus.therning.org/2022-07-09-playing-with-setting-up-emacs.html</guid>
  <pubDate>Sat, 09 Jul 2022 22:37:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Power-mode in Spacemacs]]></title>
  <description><![CDATA[
<p>
I just found the <a href="https://github.com/elizagamedev/power-mode.el">Power Mode</a> for Emacs. If you want to try it out in Spacemacs
you can make sure that your <code>~/.spacemacs</code> contains the following
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">dotspacemacs-additional-packages
'<span class="org-rainbow-delimiters-depth-1">(</span>
  ...
  <span class="org-rainbow-delimiters-depth-2">(</span>power-mode <span class="org-builtin">:location</span> <span class="org-rainbow-delimiters-depth-3">(</span>recipe
                         <span class="org-builtin">:fetcher</span> github
                         <span class="org-builtin">:repo</span> <span class="org-string">"elizagamedev/power-mode.el"</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
After a restart Power Mode can be turned on using <code>SPC SPC power-mode</code>.
</p>

<p>
Unfortunately I found that it slows down rendering so badly that Emacs isn't
keeping up with my typing. Even though I removed it right away again it was fun
to try it out, and I did learn how to add package to Spacemacs that aren't on
MELPA.
</p>

<p>
A useful resource is this <a href="https://github.com/melpa/melpa#recipe-format">reference on the recipe format</a>.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-spacemacs.html">spacemacs</a> ]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[spacemacs]]></category>
  <link>https://magnus.therning.org/2022-06-15-power-mode-in-spacemacs.html</link>
  <guid>https://magnus.therning.org/2022-06-15-power-mode-in-spacemacs.html</guid>
  <pubDate>Wed, 15 Jun 2022 08:08:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Comments and org-static-blog]]></title>
  <description><![CDATA[
<p>
I'm using <a href="https://github.com/bastibe/org-static-blog">org-static-blog</a> to generate the contents of this site. So far I'm very
happy with it, but I've gotten a few emails from readers who've wanted to
comment on something I've written and they always point out that it's not easy
to do. It's actually not a coincidence that it's a bit difficult!
</p>

<p>
Yesterday I came up with a way that might make is slightly easier without
involving JavaScript from a 3rd party. By making use of the built-in support for
adding HTML code for comments. One slight limitation is that it's a single
variable holding the code, and I'd really like to allow for both
</p>

<ul class="org-ul">
<li>using a link to a discussion site, e.g. <a href="https://www.reddit.com/">reddit</a>, as well as</li>
<li>my email address</li>
</ul>


<p>
As the comment support in org-static-blog comes in the form of a single variable
this seems a bit difficult to accomplish. However, it isn't difficult at all to
do in elisp due to the power of <code>advice-add</code>.
</p>

<p>
By using the following advice on <code>org-static-blog-publish-file</code>
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span>advice-add 'org-static-blog-publish-file <span class="org-builtin">:around</span>
            <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">lambda</span> <span class="org-rainbow-delimiters-depth-3">(</span>orig-fn filename <span class="org-type">&amp;rest</span> args<span class="org-rainbow-delimiters-depth-3">)</span>
              <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">let*</span>  <span class="org-rainbow-delimiters-depth-4">(</span><span class="org-rainbow-delimiters-depth-5">(</span>comments-url <span class="org-rainbow-delimiters-depth-6">(</span><span class="org-keyword">with-temp-buffer</span>
                                      <span class="org-rainbow-delimiters-depth-7">(</span>insert-file-contents filename<span class="org-rainbow-delimiters-depth-7">)</span>
                                      <span class="org-rainbow-delimiters-depth-7">(</span><span class="org-keyword">or</span> <span class="org-rainbow-delimiters-depth-8">(</span>cadar <span class="org-rainbow-delimiters-depth-9">(</span>org-collect-keywords '<span class="org-rainbow-delimiters-depth-1">(</span><span class="org-string">"commentsurl"</span><span class="org-rainbow-delimiters-depth-1">)</span><span class="org-rainbow-delimiters-depth-9">)</span><span class="org-rainbow-delimiters-depth-8">)</span>
                                          my-blog-default-comments-url<span class="org-rainbow-delimiters-depth-7">)</span><span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span>
                      <span class="org-rainbow-delimiters-depth-5">(</span>org-static-blog-post-comments <span class="org-rainbow-delimiters-depth-6">(</span>concat <span class="org-string">"Comment &lt;a href="</span> comments-url <span class="org-string">"&gt;here&lt;/a&gt;."</span><span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
                <span class="org-rainbow-delimiters-depth-4">(</span>apply orig-fn filename args<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
and defining <code>my-blog-default-comments-url</code> to a <code>mailto:...</code> URL I get a link
to use for commenting by either
</p>

<ol class="org-ol">
<li>set <code>commentsurl</code> to point to discussion about the post on reddit, or</li>
<li>not set <code>commentsurl</code> at all and get the <code>mailto:...</code> URL.</li>
</ol>


<p>
If you look at <a href="https://magnus.therning.org/2022-05-08-a-little-haskell:-epoch-timestamp.html">my previous post</a> you see the result of the former, and if you
look below you see the result of the latter.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-org-mode.html">org-mode</a> ]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[org-mode]]></category>
  <link>https://magnus.therning.org/2022-05-09-comments-and-org-static-blog.html</link>
  <guid>https://magnus.therning.org/2022-05-09-comments-and-org-static-blog.html</guid>
  <pubDate>Mon, 09 May 2022 22:10:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[A little Haskell: epoch timestamp]]></title>
  <description><![CDATA[
<p>
A need of getting the current <a href="https://en.wikipedia.org/wiki/Unix_time">UNIX time</a> is something that comes up every now and
then. Just this week I needed it in order to add a <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-command">k8s liveness probe</a><sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>.
</p>

<p>
While it's often rather straight forward to get the Unix time as an integer in
other languages<sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>, in Haskell there's a bit of type tetris involved.
</p>


<ol class="org-ol">
<li><a href="https://hoogle.haskell.org/?hoogle=getPOSIXTime&amp;scope=set%3Astackage">getPOSIXTime</a> gives me a <a href="https://hoogle.haskell.org/?hoogle=POSIXTime&amp;scope=set%3Astackage">POSIXTime</a>, which is an alias for <a href="https://hoogle.haskell.org/?hoogle=NominalDiffTime&amp;scope=set%3Astackage">NominalDiffTime</a>.</li>
<li><code>NominalDiffTime</code> implements <a href="https://hoogle.haskell.org/?hoogle=RealFrac&amp;scope=set%3Astackage">RealFrac</a> and can thus be converted to anything
implementing <a href="https://hoogle.haskell.org/?hoogle=Integral&amp;scope=set%3Astackage">Integral</a> (I wanted it as <code>Int64</code>).</li>
<li><code>NominalDiffTime</code> also implements <a href="https://hoogle.haskell.org/?hoogle=Num&amp;scope=set%3Astackage">Num</a>, so if the timestamp needs better
precision than seconds it's easy to do (I needed milliseconds).</li>
</ol>


<p>
The combination of the above is something like
</p>

<div class="org-src-container">
<pre class="src src-haskell">truncate <span class="org-haskell-definition">&lt;$&gt;</span> getPOSIXTime
</pre>
</div>

<p>
In my case the full function of writing the timestamp to a file looks like this
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">writeTimestampFile</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">MonadIO</span> m <span class="org-haskell-operator">=&gt;</span> <span class="org-haskell-type">Path</span> <span class="org-haskell-type">Abs</span> <span class="org-haskell-type">File</span> <span class="org-haskell-operator">-&gt;</span> m <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
<span class="org-haskell-definition">writeTimestampFile</span> afn <span class="org-haskell-operator">=</span> liftIO <span class="org-haskell-operator">$</span> <span class="org-haskell-keyword">do</span>
    truncate <span class="org-haskell-operator">@</span><span class="org-haskell-keyword">_</span> <span class="org-haskell-operator">@</span><span class="org-haskell-constructor">Int64</span> <span class="org-haskell-operator">.</span> <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-operator">*</span> <span class="org-highlight-numbers-number">1000</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">&lt;$&gt;</span> getPOSIXTime <span class="org-haskell-operator">&gt;&gt;=</span> writeFile <span class="org-rainbow-delimiters-depth-1">(</span>fromAbsFile afn<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">.</span> show
</pre>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Over the last few days I've looked into <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">k8s probes</a>. Since we're using
<a href="https://istio.io/latest/">Istio</a> TCP probes are of very <a href="https://github.com/istio/istio/pull/28737#pullrequestreview-535660318">limited use</a>, and as the service in question doesn't
offer an HTTP API I decided to use a liveness command that checks that the
contents of a file is a sufficiently recent epoch timestamp.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Rust's Chrono package has <a href="https://docs.rs/chrono/0.4.19/chrono/struct.DateTime.html#method.timestamp">Utc.timestamp(t)</a>. Python has <a href="https://docs.python.org/3/library/time.html?highlight=time%20time#time.time">time.time()</a>.
Golang has <a href="https://pkg.go.dev/time#Time.Unix">Time.Unix</a>.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-k8s.html">k8s</a> ]]></description>
  <category><![CDATA[haskell]]></category>
  <category><![CDATA[k8s]]></category>
  <link>https://magnus.therning.org/2022-05-08-a-little-haskell:-epoch-timestamp.html</link>
  <guid>https://magnus.therning.org/2022-05-08-a-little-haskell:-epoch-timestamp.html</guid>
  <pubDate>Sun, 08 May 2022 07:51:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Simple nix flake for Haskell development]]></title>
  <description><![CDATA[
<p>
Recently I've moved over to using <a href="https://nixos.wiki/wiki/Flakes">flakes</a> in my Haskell development projects. It
took me a little while to arrive at a pattern a flake for Haskell development
that I like. I'm hoping sharing it might help others when doing the same change
</p>

<div class="org-src-container">
<pre class="src src-nix"><span class="org-rainbow-delimiters-depth-1">{</span>
  <span class="org-nix-attribute">inputs</span> = <span class="org-rainbow-delimiters-depth-2">{</span>
    <span class="org-nix-attribute">nixpkgs.url</span> = <span class="org-string">"github:nixos/nixpkgs"</span>;
    <span class="org-nix-attribute">flake-utils.url</span> = <span class="org-string">"github:numtide/flake-utils"</span>;
  <span class="org-rainbow-delimiters-depth-2">}</span>;

  <span class="org-nix-attribute">outputs</span> = <span class="org-rainbow-delimiters-depth-2">{</span> self, nixpkgs, flake-utils <span class="org-rainbow-delimiters-depth-2">}</span>:
    flake-utils.lib.eachDefaultSystem <span class="org-rainbow-delimiters-depth-2">(</span>system:
      <span class="org-nix-keyword">with</span> nixpkgs.legacyPackages.$<span class="org-rainbow-delimiters-depth-3">{</span>system<span class="org-rainbow-delimiters-depth-3">}</span>;
      <span class="org-nix-keyword">let</span>
        <span class="org-nix-attribute">t</span> = lib.trivial;
        <span class="org-nix-attribute">hl</span> = haskell.lib;

        <span class="org-nix-attribute">name</span> = <span class="org-string">"project-name"</span>;

        <span class="org-nix-attribute">project</span> = devTools: <span class="org-comment"># [1]</span>
          <span class="org-nix-keyword">let</span> <span class="org-nix-attribute">addBuildTools</span> = <span class="org-rainbow-delimiters-depth-3">(</span>t.flip hl.addBuildTools<span class="org-rainbow-delimiters-depth-3">)</span> devTools;
          <span class="org-nix-keyword">in</span> haskellPackages.developPackage <span class="org-rainbow-delimiters-depth-3">{</span>
            <span class="org-nix-attribute">root</span> = lib.sourceFilesBySuffices <span class="org-nix-constant">./.</span> <span class="org-rainbow-delimiters-depth-4">[</span> <span class="org-string">".cabal"</span> <span class="org-string">".hs"</span> <span class="org-rainbow-delimiters-depth-4">]</span>;
            <span class="org-nix-attribute">name</span> = name;
            <span class="org-nix-attribute">returnShellEnv</span> = !<span class="org-rainbow-delimiters-depth-4">(</span>devTools == <span class="org-rainbow-delimiters-depth-5">[</span> <span class="org-rainbow-delimiters-depth-5">]</span><span class="org-rainbow-delimiters-depth-4">)</span>; <span class="org-comment"># [2]</span>

            <span class="org-nix-attribute">modifier</span> = <span class="org-rainbow-delimiters-depth-4">(</span>t.flip t.pipe<span class="org-rainbow-delimiters-depth-4">)</span> <span class="org-rainbow-delimiters-depth-4">[</span>
              addBuildTools
              hl.dontHaddock
              hl.enableStaticLibraries
              hl.justStaticExecutables
              hl.disableLibraryProfiling
              hl.disableExecutableProfiling
            <span class="org-rainbow-delimiters-depth-4">]</span>;
          <span class="org-rainbow-delimiters-depth-3">}</span>;

      <span class="org-nix-keyword">in</span> <span class="org-rainbow-delimiters-depth-3">{</span>
        <span class="org-nix-attribute">packages.pkg</span> = project <span class="org-rainbow-delimiters-depth-4">[</span> <span class="org-rainbow-delimiters-depth-4">]</span>; <span class="org-comment"># [3]</span>

        <span class="org-nix-attribute">defaultPackage</span> = self.packages.$<span class="org-rainbow-delimiters-depth-4">{</span>system<span class="org-rainbow-delimiters-depth-4">}</span>.pkg;

        <span class="org-nix-attribute">devShell</span> = project <span class="org-rainbow-delimiters-depth-4">(</span><span class="org-nix-keyword">with</span> haskellPackages; <span class="org-rainbow-delimiters-depth-5">[</span> <span class="org-comment"># [4]</span>
          cabal-fmt
          cabal-install
          haskell-language-server
          hlint
        <span class="org-rainbow-delimiters-depth-5">]</span><span class="org-rainbow-delimiters-depth-4">)</span>;
      <span class="org-rainbow-delimiters-depth-3">}</span><span class="org-rainbow-delimiters-depth-2">)</span>;
<span class="org-rainbow-delimiters-depth-1">}</span>
</pre>
</div>

<p>
The main issue I ran into is getting a development shell out of
<code>haskellPackages.developPackage</code>, it requires <code>returnShellEnv</code> to be <code>true</code>.
Something that isn't too easy to find out. This means that the only solution
I've found to getting a development shell is to have separate expressions for
building and getting a shell. In the above flake the build expression, <i>[3]</i>,
passes an empty list of development tools, the argument <code>devTools</code> at <i>[1]</i>,
while the development shell expression, <i>[4]</i>, passes in a list of tools needed
for development only. The decision of whether the expression is for building or
for a development shell, <i>[2]</i>, then looks at the list of development tools
passed in.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-nix.html">nix</a> </div>]]></description>
  <category><![CDATA[haskell]]></category>
  <category><![CDATA[nix]]></category>
  <link>https://magnus.therning.org/2022-03-13-simple-nix-flake-for-haskell-development.html</link>
  <guid>https://magnus.therning.org/2022-03-13-simple-nix-flake-for-haskell-development.html</guid>
  <pubDate>Sun, 13 Mar 2022 07:29:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Keeping Projectile's cache tidy]]></title>
  <description><![CDATA[
<p>
A while back I added a function to find all projects recursively from a
directory and add them to Projectile's cache (see the <a href="2019-11-05-000-populating-projectile-s-cache.html">Populating Projectile's
cache</a>). Since then I've just made a tiny change to also include containing a
<code>.projectile</code> file.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">projectile-extra-add-projects-in-subfolders</span> <span class="org-rainbow-delimiters-depth-2">(</span>projects-root<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">interactive</span> <span class="org-rainbow-delimiters-depth-3">(</span>list <span class="org-rainbow-delimiters-depth-4">(</span>read-directory-name <span class="org-string">"Add to known projects: "</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>message <span class="org-string">"Searching for projects in %s..."</span> projects-root<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">let*</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>proj-rx <span class="org-rainbow-delimiters-depth-5">(</span><span class="org-keyword">rx</span> <span class="org-rainbow-delimiters-depth-6">(</span><span class="org-keyword">and</span> line-start ?. <span class="org-rainbow-delimiters-depth-7">(</span><span class="org-keyword">or</span> <span class="org-string">"projectile"</span> <span class="org-string">"git"</span><span class="org-rainbow-delimiters-depth-7">)</span> line-end<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
         <span class="org-rainbow-delimiters-depth-4">(</span>dirs <span class="org-rainbow-delimiters-depth-5">(</span>seq-map
                'file-name-directory
                <span class="org-rainbow-delimiters-depth-6">(</span>directory-files-recursively projects-root
                                             proj-rx
                                             t<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>seq-do 'projectile-add-known-project dirs<span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>message <span class="org-string">"Added %d projects"</span> <span class="org-rainbow-delimiters-depth-4">(</span>length dirs<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
Since then I've also found a need for tidying the cache, in my casse that means
removing entries in the cache that no longer exist on disk. I didn't find a
function for it, so I wrote one.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">projectile-extra-tidy-projects</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">interactive</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">let</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>missing-dirs <span class="org-rainbow-delimiters-depth-5">(</span>seq-remove 'file-directory-p projectile-known-projects<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>seq-do 'projectile-remove-known-project missing-dirs<span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>message <span class="org-string">"Tidied %d projects"</span> <span class="org-rainbow-delimiters-depth-4">(</span>length missing-dirs<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-elisp.html">elisp</a> <a href="https://magnus.therning.org/tag-projectile.html">projectile</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[elisp]]></category>
  <category><![CDATA[projectile]]></category>
  <link>https://magnus.therning.org/2022-01-30-keeping-projectile's-cache-tidy.html</link>
  <guid>https://magnus.therning.org/2022-01-30-keeping-projectile's-cache-tidy.html</guid>
  <pubDate>Sun, 30 Jan 2022 15:14:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Accessing the host from inside a Docker container]]></title>
  <description><![CDATA[
<p>
To give the container access to a service running on the the host add
<code>extra_hosts</code> to its definition in the Compose file:
</p>

<div class="org-src-container">
<pre class="src src-yaml"><span class="org-variable-name">svc</span>:
  ...
  <span class="org-variable-name">extra_hosts</span>:
    - <span class="org-string">"host.docker.internal:host-gateway"</span>
</pre>
</div>

<p>
Then it's possible to access it as <code>host.docker.internal</code>. Just don't forget to
bind the service on the host to something else than <code>127.0.0.1</code>.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-compose.html">compose</a> <a href="https://magnus.therning.org/tag-docker.html">docker</a> </div>]]></description>
  <category><![CDATA[compose]]></category>
  <category><![CDATA[docker]]></category>
  <link>https://magnus.therning.org/2022-01-03-accessing-the-host-from-inside-a-docker-container.html</link>
  <guid>https://magnus.therning.org/2022-01-03-accessing-the-host-from-inside-a-docker-container.html</guid>
  <pubDate>Mon, 03 Jan 2022 13:48:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Trimming newline on code block variable]]></title>
  <description><![CDATA[
<p>
Today I found <a href="https://github.com/zweifisch/ob-http">ob-http</a> and decided to try it out a little. I quickly ran into a
problem of a trailing newline. Basically I tried to do something like this:
</p>

<div class="org-src-container">
<pre class="src src-org"><span class="org-org-meta-line">#+name: id</span>
<span class="org-org-block-begin-line">#+begin_src http :select .id :cache yes</span>
<span class="org-org-block"><span class="org-constant">POST</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-function-name">/foo</span></span>
<span class="org-org-block"><span class="org-variable-name">Content-Type</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">application/json</span></span>

<span class="org-org-block"><span class="org-comment">{</span></span>
<span class="org-org-block">  </span><span class="org-org-block"><span class="org-string">"foo"</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">"toto"</span></span><span class="org-org-block"><span class="org-comment">,</span></span>
<span class="org-org-block">  </span><span class="org-org-block"><span class="org-string">"bar"</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">"tata"</span></span>
<span class="org-org-block"><span class="org-comment">}</span></span>
<span class="org-org-block-end-line">#+end_src</span>

<span class="org-org-meta-line">#+RESULTS[c5fd99206822a2109d7ac1d140185e6ec3f4f1d9]: id</span>
<span class="org-org-block-begin-line">#+begin_example</span>
<span class="custom">48722051-f81b-433f-acb4-a65d961ec841</span>
<span class="org-org-block-end-line">#+end_example</span>

<span class="org-org-meta-line">#+header: :var id=id</span>
<span class="org-org-block-begin-line">#+begin_src http</span>
<span class="org-org-block"><span class="org-constant">POST</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-function-name">/foo/${id}/fix</span></span>
<span class="org-org-block-end-line">#+end_src</span>
</pre>
</div>

<p>
The trailing newline messes up the URL though, and the second code block fails.
</p>

<p>
I found two ways to deal with it, using a table and using <code>org-sbe</code>
</p>

<div id="outline-container-org3ef143c" class="outline-2">
<h2 id="org3ef143c">Using a table</h2>
<div class="outline-text-2" id="text-org3ef143c">
<div class="org-src-container">
<pre class="src src-org"><span class="org-org-meta-line">#+name: id</span>
<span class="org-org-block-begin-line">#+begin_src http :select .id :cache yes :results table</span>
<span class="org-org-block"><span class="org-constant">POST</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-function-name">/foo</span></span>
<span class="org-org-block"><span class="org-variable-name">Content-Type</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">application/json</span></span>

<span class="org-org-block"><span class="org-comment">{</span></span>
<span class="org-org-block">  </span><span class="org-org-block"><span class="org-string">"foo"</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">"toto"</span></span><span class="org-org-block"><span class="org-comment">,</span></span>
<span class="org-org-block">  </span><span class="org-org-block"><span class="org-string">"bar"</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">"tata"</span></span>
<span class="org-org-block"><span class="org-comment">}</span></span>
<span class="org-org-block-end-line">#+end_src</span>

<span class="org-org-meta-line">#+RESULTS[c5fd99206822a2109d7ac1d140185e6ec3f4f1d9]: id</span>
<span class="org-org-block-begin-line">#+begin_example</span>
<span class="custom">| 48722051-f81b-433f-acb4-a65d961ec841 |</span>
<span class="org-org-block-end-line">#+end_example</span>

<span class="org-org-meta-line">#+header: :var id=id[0,0]</span>
<span class="org-org-block-begin-line">#+begin_src http</span>
<span class="org-org-block"><span class="org-constant">POST</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-function-name">/foo/${id}/fix</span></span>
<span class="org-org-block-end-line">#+end_src</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org33493ca" class="outline-2">
<h2 id="org33493ca">Using <code>org-sbe</code></h2>
<div class="outline-text-2" id="text-org33493ca">
<div class="org-src-container">
<pre class="src src-org"><span class="org-org-meta-line">#+name: id</span>
<span class="org-org-block-begin-line">#+begin_src http :select .id :cache yes</span>
<span class="org-org-block"><span class="org-constant">POST</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-function-name">/foo</span></span>
<span class="org-org-block"><span class="org-variable-name">Content-Type</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">application/json</span></span>

<span class="org-org-block"><span class="org-comment">{</span></span>
<span class="org-org-block">  </span><span class="org-org-block"><span class="org-string">"foo"</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">"toto"</span></span><span class="org-org-block"><span class="org-comment">,</span></span>
<span class="org-org-block">  </span><span class="org-org-block"><span class="org-string">"bar"</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">"tata"</span></span>
<span class="org-org-block"><span class="org-comment">}</span></span>
<span class="org-org-block-end-line">#+end_src</span>

<span class="org-org-meta-line">#+RESULTS[c5fd99206822a2109d7ac1d140185e6ec3f4f1d9]: id</span>
<span class="org-org-block-begin-line">#+begin_example</span>
<span class="custom">48722051-f81b-433f-acb4-a65d961ec841</span>
<span class="org-org-block-end-line">#+end_example</span>

<span class="org-org-meta-line">#+header: :var id=(org-sbe id)</span>
<span class="org-org-block-begin-line">#+begin_src http</span>
<span class="org-org-block"><span class="org-constant">POST</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-function-name">/foo/${id}/fix</span></span>
<span class="org-org-block-end-line">#+end_src</span>
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-org-mode.html">org-mode</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[org-mode]]></category>
  <link>https://magnus.therning.org/2022-01-01-trimming-newline-on-code-block-variable.html</link>
  <guid>https://magnus.therning.org/2022-01-01-trimming-newline-on-code-block-variable.html</guid>
  <pubDate>Sat, 01 Jan 2022 19:24:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Magit/forge and self-hosted GitLab]]></title>
  <description><![CDATA[
<p>
As I found the documentation for adding a self-hosted instance of GitLab to to
magit/forge a bit difficult, I thought I'd write a note for my future self (and
anyone else who might find it useful).
</p>

<p>
First put the following in `~/.gitconfig`
</p>

<div class="org-src-container">
<pre class="src src-gitconfig">[<span class="org-type">gitlab</span> <span class="org-function-name">"gitlab.private.com/api/v4"</span>]
  <span class="org-variable-name">user</span> = my.username
</pre>
</div>

<p>
Then create an access token on GitLab. I ticked <code>api</code> and <code>write_repository</code>,
which seems to work fine so far. Put the token in <code>~/.authinfo.gpg</code>
</p>

<div class="org-src-container">
<pre class="src src-authinfo"><span class="org-variable-name">machine</span> <span class="org-builtin">gitlab.private.com/api/v4</span> <span class="org-comment-delimiter">login</span> <span class="org-keyword">my.user^forge</span> <span class="org-comment-delimiter">password</span> <span class="org-doc">&lt;token&gt;</span>
</pre>
</div>

<p>
(Remember that a newline is needed at the end of the file.)
</p>

<p>
Finally, add the GitLab instance to <code>'forge-alist</code>
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">setq</span>
 forge-alist
 '<span class="org-rainbow-delimiters-depth-2">(</span><span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"gitlab.private.com"</span> <span class="org-string">"gitlab.private.com/api/v4"</span> <span class="org-string">"gitlab.private.com"</span> forge-gitlab-repository<span class="org-rainbow-delimiters-depth-3">)</span>
   <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"github.com"</span> <span class="org-string">"api.github.com"</span> <span class="org-string">"github.com"</span> forge-github-repository<span class="org-rainbow-delimiters-depth-3">)</span>
   <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-string">"gitlab.com"</span> <span class="org-string">"gitlab.com/api/v4"</span> <span class="org-string">"gitlab.com"</span> forge-gitlab-repository<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
 <span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
That's it!
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-git.html">git</a> <a href="https://magnus.therning.org/tag-magit.html">magit</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[git]]></category>
  <category><![CDATA[magit]]></category>
  <link>https://magnus.therning.org/2021-12-08-magit_forge-and-self-hosted-gitlab.html</link>
  <guid>https://magnus.therning.org/2021-12-08-magit_forge-and-self-hosted-gitlab.html</guid>
  <pubDate>Wed, 08 Dec 2021 06:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Fallback of actions]]></title>
  <description><![CDATA[
<p>
In a tool I'm writing I want to load a file that may reside on the local disk,
but if it isn't there I want to fetch it from the web. Basically it's very
similar to having a cache and dealing with a miss, except in my case I don't
populate the cache.
</p>

<p>
Let me first define the functions to play with
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">loadFromDisk</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">String</span> <span class="org-haskell-operator">-&gt;</span> <span class="org-haskell-type">IO</span> <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> <span class="org-haskell-type">String</span> <span class="org-haskell-type">Int</span><span class="org-rainbow-delimiters-depth-1">)</span>
<span class="org-haskell-definition">loadFromDisk</span> k<span class="org-haskell-operator">@</span><span class="org-string">"bad key"</span> <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
    putStrLn <span class="org-haskell-operator">$</span> <span class="org-string">"local: "</span> <span class="org-haskell-operator">&lt;&gt;</span> k
    pure <span class="org-haskell-operator">$</span> <span class="org-haskell-constructor">Left</span> <span class="org-haskell-operator">$</span> <span class="org-string">"no such local key: "</span> <span class="org-haskell-operator">&lt;&gt;</span> k
<span class="org-haskell-definition">loadFromDisk</span> k <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
    putStrLn <span class="org-haskell-operator">$</span> <span class="org-string">"local: "</span> <span class="org-haskell-operator">&lt;&gt;</span> k
    pure <span class="org-haskell-operator">$</span> <span class="org-haskell-constructor">Right</span> <span class="org-haskell-operator">$</span> length k

<span class="org-haskell-definition">loadFromWeb</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">String</span> <span class="org-haskell-operator">-&gt;</span> <span class="org-haskell-type">IO</span> <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> <span class="org-haskell-type">String</span> <span class="org-haskell-type">Int</span><span class="org-rainbow-delimiters-depth-1">)</span>
<span class="org-haskell-definition">loadFromWeb</span> k<span class="org-haskell-operator">@</span><span class="org-string">"bad key"</span> <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
    putStrLn <span class="org-haskell-operator">$</span> <span class="org-string">"web: "</span> <span class="org-haskell-operator">&lt;&gt;</span> k
    pure <span class="org-haskell-operator">$</span> <span class="org-haskell-constructor">Left</span> <span class="org-haskell-operator">$</span> <span class="org-string">"no such remote key: "</span> <span class="org-haskell-operator">&lt;&gt;</span> k
<span class="org-haskell-definition">loadFromWeb</span> k <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
    putStrLn <span class="org-haskell-operator">$</span> <span class="org-string">"web: "</span> <span class="org-haskell-operator">&lt;&gt;</span> k
    pure <span class="org-haskell-operator">$</span> <span class="org-haskell-constructor">Right</span> <span class="org-haskell-operator">$</span> length k
</pre>
</div>

<div id="outline-container-org06d71ff" class="outline-2">
<h2 id="org06d71ff">Discarded solution: using the <code>Alternative</code> of <code>IO</code> directly</h2>
<div class="outline-text-2" id="text-org06d71ff">
<p>
It's fairly easy to get the desired behaviour but <code>Alternative</code> of <code>IO</code> is based
on exceptions which doesn't strike me as a good idea unless one is using <code>IO</code>
directly. That is fine in a smallish application, but in my case it makes sense
to use tagless style (or <code>ReaderT</code> pattern) so I'll skip exploring this option
completely.
</p>
</div>
</div>

<div id="outline-container-org393493a" class="outline-2">
<h2 id="org393493a">First attempt: lifting into the <code>Alternative</code> of <code>Either e</code></h2>
<div class="outline-text-2" id="text-org393493a">
<p>
There's an instance of <code>Alternative</code> for <code>Either e</code> in version 0.5 of
<a href="https://hackage.haskell.org/package/transformers-0.5.6.2/docs/Control-Monad-Trans-Error.html#section.orphans">transformers</a>. It's deprecated and it's gone in newer versions of the library as
one really should use <code>Except</code> or <code>ExceptT</code> instead. Even if I don't think it's
where I want to end up, it's not an altogether bad place to start.
</p>

<p>
Now let's define a function using <code>liftA2 (&lt;|&gt;)</code> to make it easy to see what the
behaviour is
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">fallBack</span> <span class="org-haskell-operator">::</span>
    <span class="org-haskell-type">Applicative</span> m <span class="org-haskell-operator">=&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> <span class="org-haskell-type">String</span> res<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> <span class="org-haskell-type">String</span> res<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> <span class="org-haskell-type">String</span> res<span class="org-rainbow-delimiters-depth-1">)</span>
<span class="org-haskell-definition">fallBack</span> <span class="org-haskell-operator">=</span> liftA2 <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-operator">&lt;|&gt;</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<pre class="example" id="orgfc4f34e">
λ&gt; loadFromDisk "bad key" `fallBack` loadFromWeb "good key"
local: bad key
web: good key
Right 8

λ&gt; loadFromDisk "bad key" `fallBack` loadFromWeb "bad key"
local: bad key
web: bad key
Left "no such remote key: bad key"
</pre>

<p>
The first example shows that it falls back to loading form the web, and the
second one shows that it's only the last failure that survives. The latter part,
that only the last failure survives, isn't ideal but I think I can live with
that. If I were interested in collecting all failures I would reach for
<code>Validation</code> from <a href="https://hackage.haskell.org/package/validation-selective"><code>validation-selective</code></a> (there's one in <a href="https://hackage.haskell.org/package/validation-selective"><code>validation</code></a> that
should work too).
</p>

<p>
So far so good, but the next example shows a behaviour I don't want
</p>

<pre class="example" id="orgfe77c40">
λ&gt; loadFromDisk "good key" `fallBack` loadFromWeb "good key"
local: good key
web: good key
Right 8
</pre>

<p>
or to make it even more explicit
</p>

<pre class="example" id="org0b4b72a">
λ&gt; loadFromDisk "good key" `fallBack` undefined
local: good key
*** Exception: Prelude.undefined
CallStack (from HasCallStack):
  error, called at libraries/base/GHC/Err.hs:79:14 in base:GHC.Err
  undefined, called at &lt;interactive&gt;:451:36 in interactive:Ghci4
</pre>

<p>
There's no short-circuiting!<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>
</p>

<p>
The behaviour I want is of course that if the first action is successful, then
the second action shouldn't take place at all.
</p>

<p>
It looks like either <code>&lt;|&gt;</code> is strict in its second argument, or maybe it's
<code>liftA2</code> that forces it. I've not bothered digging into the details, it's enough
to observe it to realise that this approach isn't good enough.
</p>
</div>
</div>

<div id="outline-container-second-attempt" class="outline-2">
<h2 id="second-attempt">Second attempt: cutting it short, manually</h2>
<div class="outline-text-2" id="text-second-attempt">
<p>
Fixing the lack of short-circuiting the evaluation after the first success isn't
too difficult to do manually. Something like this does it
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">fallBack</span> <span class="org-haskell-operator">::</span>
    <span class="org-haskell-type">Monad</span> m <span class="org-haskell-operator">=&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> <span class="org-haskell-type">String</span> a<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> <span class="org-haskell-type">String</span> a<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> <span class="org-haskell-type">String</span> a<span class="org-rainbow-delimiters-depth-1">)</span>
<span class="org-haskell-definition">fallBack</span> first other <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
    first <span class="org-haskell-operator">&gt;&gt;=</span> <span class="org-haskell-operator">\</span><span class="org-haskell-keyword">case</span>
        r<span class="org-haskell-operator">@</span><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-constructor">Right</span> <span class="org-haskell-keyword">_</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span> pure r
        r<span class="org-haskell-operator">@</span><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-constructor">Left</span> <span class="org-haskell-keyword">_</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span> <span class="org-rainbow-delimiters-depth-1">(</span>r <span class="org-haskell-operator">&lt;|&gt;</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">&lt;$&gt;</span> other
</pre>
</div>

<p>
It does indeed show the behaviour I want
</p>

<pre class="example" id="org3813a45">
λ&gt; loadFromDisk "bad key" `fallBack` loadFromWeb "good key"
local: bad key
web: good key
Right 8

λ&gt; loadFromDisk "bad key" `fallBack` loadFromWeb "bad key"
local: bad key
web: bad key
Left "no such remote key: bad key"

λ&gt; loadFromDisk "good key" `fallBack` undefined
local: good key
Right 8
</pre>

<p>
Excellent! And to switch over to use <code>Validation</code> one just have to switch
constructors, <code>Right</code> becomes <code>Success</code> and <code>Left</code> becomes <code>Failure</code>. Though
collecting the failures by concatenating strings isn't the best idea of course.
Switching to some other <code>Monoid</code> (that's the constraint on the failure type)
isn't too difficult.
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">fallBack</span> <span class="org-haskell-operator">::</span>
    <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Monad</span> m, <span class="org-haskell-type">Monoid</span> e<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">=&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Validation</span> e a<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Validation</span> e a<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Validation</span> e a<span class="org-rainbow-delimiters-depth-1">)</span>
<span class="org-haskell-definition">fallBack</span> first other <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
    first <span class="org-haskell-operator">&gt;&gt;=</span> <span class="org-haskell-operator">\</span><span class="org-haskell-keyword">case</span>
        r<span class="org-haskell-operator">@</span><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-constructor">Success</span> <span class="org-haskell-keyword">_</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span> pure r
        r<span class="org-haskell-operator">@</span><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-constructor">Failure</span> <span class="org-haskell-keyword">_</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span> <span class="org-rainbow-delimiters-depth-1">(</span>r <span class="org-haskell-operator">&lt;|&gt;</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">&lt;$&gt;</span> other
</pre>
</div>
</div>
</div>

<div id="outline-container-org5d3ae21" class="outline-2">
<h2 id="org5d3ae21">Third attempt: pulling failures out to <code>MonadPlus</code></h2>
<div class="outline-text-2" id="text-org5d3ae21">
<p>
After writing the <code>fallBack</code> function I still wanted to explore other solutions.
There's almost always something more out there in the Haskell eco system, right?
So I asked in the <i>#haskell-beginners</i> channel on the Functional Programming
Slack. The way I asked the question resulted in answers that iterates over a
list of actions and cutting at the first success.
</p>

<p>
The first suggestion had me a little confused at first, but once I re-organised
the helper function a little it made more sense to me.
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">mFromRight</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">MonadPlus</span> m <span class="org-haskell-operator">=&gt;</span> m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> err res<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span> m res
<span class="org-haskell-definition">mFromRight</span> <span class="org-haskell-operator">=</span> <span class="org-rainbow-delimiters-depth-1">(</span>either <span class="org-rainbow-delimiters-depth-2">(</span>const mzero<span class="org-rainbow-delimiters-depth-2">)</span> return <span class="org-haskell-operator">=&lt;&lt;</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
To use it put the actions in a list, map the helper above, and finally run
<code>asum</code> on it all<sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>. I think it makes it a little clearer what happens if
it's rewritten like this.
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">firstRightM</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">MonadPlus</span> m <span class="org-haskell-operator">=&gt;</span> <span class="org-rainbow-delimiters-depth-1">[</span>m <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-haskell-type">Either</span> err res<span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">]</span> <span class="org-haskell-operator">-&gt;</span> m res
<span class="org-haskell-definition">firstRightM</span> <span class="org-haskell-operator">=</span> asum <span class="org-haskell-operator">.</span> fmap go
  <span class="org-haskell-keyword">where</span>
    go m <span class="org-haskell-operator">=</span> m <span class="org-haskell-operator">&gt;&gt;=</span> either <span class="org-rainbow-delimiters-depth-1">(</span>const mzero<span class="org-rainbow-delimiters-depth-1">)</span> return
</pre>
</div>

<pre class="example" id="orgc0d84cf">
λ&gt; firstRightM [loadFromDisk "bad key", loadFromWeb "good key"]
local: bad key
web: good key
8

λ&gt; firstRightM [loadFromDisk "good key", undefined]
local: good key
8
</pre>

<p>
So far so good, but I left out the case where both fail, because that's sort of
the fly in the ointment here
</p>

<pre class="example" id="org9b2d311">
λ&gt; firstRightM [loadFromDisk "bad key", loadFromWeb "bad key"]
local: bad key
web: bad key
*** Exception: user error (mzero)
</pre>

<p>
It's not nice to be back to deal with exceptions, but it's possible to recover,
e.g. by appending <code>&lt;|&gt; pure 0</code>.
</p>

<pre class="example" id="org1198c83">
λ&gt; firstRightM [loadFromDisk "bad key", loadFromWeb "bad key"] &lt;|&gt; pure 0
local: bad key
web: bad key
0
</pre>

<p>
However that removes the ability to deal with the situation where all actions
fail. Not nice! Add to that the difficulty of coming up with a <i>good</i>
<code>MonadPlus</code> instance for an application monad; one basically have to resort to
the same thing as for <code>IO</code>, i.e. to throw an exception. Also not nice!
</p>
</div>
</div>

<div id="outline-container-fourth-attempt" class="outline-2">
<h2 id="fourth-attempt">Fourth attempt: wrapping in <code>ExceptT</code> to get its <code>Alternative</code> behaviour</h2>
<div class="outline-text-2" id="text-fourth-attempt">
<p>
This was another suggestion from the Slack channel, and it is the one I like the
most. Again it was suggested as a way to stop at the first successful action in
a list of actions.
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">firstRightM</span> <span class="org-haskell-operator">::</span>
    <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Foldable</span> t, <span class="org-haskell-type">Functor</span> t, <span class="org-haskell-type">Monad</span> m, <span class="org-haskell-type">Monoid</span> err<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">=&gt;</span>
    t <span class="org-rainbow-delimiters-depth-1">(</span>m <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-haskell-type">Either</span> err res<span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> err res<span class="org-rainbow-delimiters-depth-1">)</span>
<span class="org-haskell-definition">firstRightM</span> <span class="org-haskell-operator">=</span> runExceptT <span class="org-haskell-operator">.</span> asum <span class="org-haskell-operator">.</span> fmap <span class="org-haskell-constructor">ExceptT</span>
</pre>
</div>

<p>
Which can be used similarly to the previous one. It's also easy to write a
variant of <code>fallBack</code> for it.
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">fallBack</span> <span class="org-haskell-operator">::</span>
    <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Monad</span> m, <span class="org-haskell-type">Monoid</span> err<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">=&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> err res<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> err res<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span>
    m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Either</span> err res<span class="org-rainbow-delimiters-depth-1">)</span>
<span class="org-haskell-definition">fallBack</span> first other <span class="org-haskell-operator">=</span> runExceptT <span class="org-haskell-operator">$</span> <span class="org-haskell-constructor">ExceptT</span> first <span class="org-haskell-operator">&lt;|&gt;</span> <span class="org-haskell-constructor">ExceptT</span> other
</pre>
</div>

<pre class="example" id="orgb08a34f">
λ&gt; loadFromDisk "bad key" `fallBack` loadFromWeb "good key"
local: bad key
web: good key
Right 8

λ&gt; loadFromDisk "good key" `fallBack` undefined
local: good key
Right 8

λ&gt; loadFromDisk "bad key" `fallBack` loadFromWeb "bad key"
local: bad key
web: bad key
Left "no such local key: bad keyno such remote key: bad key"
</pre>

<p>
Yay! This solution has the short-circuiting behaviour I want, as well as
collecting all errors on failure.
</p>
</div>
</div>

<div id="outline-container-org63037a5" class="outline-2">
<h2 id="org63037a5">Conclusion</h2>
<div class="outline-text-2" id="text-org63037a5">
<p>
I'm still a little disappointed that <code>liftA2 (&lt;|&gt;)</code> isn't short-circuiting as I
still think it's the easiest of the approaches. However, it's a problem that one
has to rely on a deprecated instance of <code>Alternative</code> for <code>Either String</code>,
but switching to use <code>Validation</code> would be only a minor change.
</p>

<p>
Manually writing the <code>fallBack</code> function, as I did in the <a href="#second-attempt">second attempt</a>,
results in very explicit code which is nice as it often reduces the cognitive
load for the reader. It's a contender, but using the deprecated <code>Alternative</code>
instance is problematic and introducing <code>Validition</code>, an arguably not very
common type, takes away a little of the appeal.
</p>

<p>
In the end I prefer the <a href="#fourth-attempt">fourth attempt</a>. It behaves exactly like I want and even
though <code>ExpectT</code> lives in <i>transformers</i> I feel that it (I pull it in via <i>mtl</i>)
is in such wide use that most Haskell programmers will be familiar with it.
</p>

<p>
One final thing to add is that the <a href="https://hackage.haskell.org/package/validation-selective-0.1.0.1/docs/Validation.html">documentation of <code>Validation</code></a> is an excellent
inspiration when it comes to the behaviour of its instances. I wish that the
documentation of other packages, in particular commonly used ones like <i>base</i>,
<i>transformers</i>, and <i>mtl</i>, would be more like it.
</p>
</div>
</div>

<div id="outline-container-org1914c53" class="outline-2">
<h2 id="org1914c53">Comments, feedback, and questions</h2>
<div class="outline-text-2" id="text-org1914c53">
</div>
<div id="outline-container-org5082aab" class="outline-3">
<h3 id="org5082aab"><span class="timestamp-wrapper"><span class="timestamp">[2021-11-28 Sun] </span></span> Dustin Sallings</h3>
<div class="outline-text-3" id="text-org5082aab">
<div class="notes" id="org1f46424">
<p>
Dustin sent me a comment via email a while ago, it's now March 2022 so it's
taken me embarrassingly long to publish it here.
</p>

<p>
I removed a bit from the beginning of the email as it doesn't relate to this
post.
</p>

</div>

<p>
&#x2026; a thing I've written code for before that I was reasonably pleased with. I
have a suite of software for managing my GoPro media which involves doing some
metadata extraction from images and video. There will be multiple transcodings
of each medium with each that contains the metadata having it completely intact
(i.e., low quality encodings do not lose metadata fidelity). I also run this on
multiple machines and store a cache of Metadata in S3.
</p>

<p>
Sometimes, I've already processed the metadata on another machine. Often, I can
get it from the lowest quality. Sometimes, there's no metadata at all. The core
of my extraction looks like this:
</p>

<div class="org-src-container">
<pre class="src src-haskell">ms <span class="org-haskell-operator">&lt;-</span> asum <span class="org-rainbow-delimiters-depth-1">[</span>
  <span class="org-haskell-constructor">Just</span> <span class="org-haskell-operator">.</span> BL.toStrict <span class="org-haskell-operator">&lt;$&gt;</span> getMetaBlob mid,
  fv <span class="org-string">"mp4_low"</span> <span class="org-rainbow-delimiters-depth-2">(</span>fn <span class="org-string">"low"</span><span class="org-rainbow-delimiters-depth-2">)</span>,
  fv <span class="org-string">"high_res_proxy_mp4"</span> <span class="org-rainbow-delimiters-depth-2">(</span>fn <span class="org-string">"high"</span><span class="org-rainbow-delimiters-depth-2">)</span>,
  fv <span class="org-string">"source"</span> <span class="org-rainbow-delimiters-depth-2">(</span>fn <span class="org-string">"src"</span><span class="org-rainbow-delimiters-depth-2">)</span>,
  pure <span class="org-haskell-constructor">Nothing</span><span class="org-rainbow-delimiters-depth-1">]</span>
</pre>
</div>

<p>
The first version grabs the processed blob from S3. The next three fetch (and
process) increasingly larger variants of the uploaded media. The last one just
gives up and says there's no metadata available (and memoizes that in the local
DB and S3).
</p>

<p>
Some of these objects are in the tens of gigs, and I had a really bad internet
connection when I first wrote this software, so I needed it to work.
</p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
I'm not sure if it's a good term to use in this case as <a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation">Wikipedia</a> says
it's for Boolean operators. I hope it's not too far a stretch to use it in this
context too.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
In the version of <i>base</i> I'm using there is no <code>asum</code>, so I simply copied
the implementation from a later version:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">asum</span> <span class="org-haskell-operator">::</span> <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Foldable</span> t, <span class="org-haskell-type">Alternative</span> f<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">=&gt;</span> t <span class="org-rainbow-delimiters-depth-1">(</span>f a<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">-&gt;</span> f a
<span class="org-haskell-definition">asum</span> <span class="org-haskell-operator">=</span> foldr <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-operator">&lt;|&gt;</span><span class="org-rainbow-delimiters-depth-1">)</span> empty
</pre>
</div></div></div>


</div>
</div><div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-alternative_typeclass.html">alternative_typeclass</a> <a href="https://magnus.therning.org/tag-caching.html">caching</a> <a href="https://magnus.therning.org/tag-fallback.html">fallback</a> <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> </div>]]></description>
  <category><![CDATA[alternative_typeclass]]></category>
  <category><![CDATA[caching]]></category>
  <category><![CDATA[fallback]]></category>
  <category><![CDATA[haskell]]></category>
  <link>https://magnus.therning.org/2021-11-27-fallback-of-actions.html</link>
  <guid>https://magnus.therning.org/2021-11-27-fallback-of-actions.html</guid>
  <pubDate>Sat, 27 Nov 2021 11:31:00 +0100</pubDate>
</item>
</channel>
</rss>
