<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Magnus web site]]></title>
<description><![CDATA[Magnus web site]]></description>
<link>https://magnus.therning.org/</link>
<lastBuildDate>Sat, 07 Jan 2023 09:09:02 +0100</lastBuildDate>
<item>
  <title><![CDATA[Annotate projects in Emacs]]></title>
  <description><![CDATA[
<p>
Every now and then I've wished to write comments on files in a project, but I've
never found a good way to do that. <a href="https://www.emacswiki.org/emacs/Annotate">annotate.el</a> and <a href="https://www.emacswiki.org/emacs/OrgAnnotateFile">org-annotate-file</a> both
collect annotations in a central place (in my <code>$HOME</code>), while <a href="https://www.emacswiki.org/emacs/Marginalia">marginalia</a> puts
annotations in files next to the source files but in a format that's rather
cryptic and tends to be messed up when attached to multiple lines. None of them
is ideal, I'd like the format to be org-mode, but not in a central file. At the
same time having one annotation file per source file is simply too much.
</p>

<p>
I tried wrapping <code>org-annotate-file</code>, setting <code>org-annotate-file-storage-file</code>
and taking advantage of elisp's dynamic binding. However, it opens the
annotation file in the current window, and I'd really like to split the window
and open the annotations the right. Rather than trying to sort of "work it out
backwards" I decided to write a small package and use as much of the
functionality in <code>org-annotate-file.el</code> as possible.
</p>

<p>
First off I decided that I want the annotation file to be called
<code>projectile-annotations.org</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defvar</span> <span class="org-variable-name">org-projectile-annotate-file-name</span> <span class="org-string">"projectile-annotations.org"</span>
  <span class="org-doc">"The name of the file to store project annotations."</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
Then I wanted a slightly modified version of <code>org-annotate-file-show-section</code>, I
wanted it to respect the root of the project.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">org-projectile-annotate--file-show-section</span> <span class="org-rainbow-delimiters-depth-2">(</span>storage-file<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-doc">"Add or show annotation entry in STORAGE-FILE and return the buffer."</span>
  <span class="org-comment-delimiter">;; </span><span class="org-comment">modified version of org-annotate-file-show-section</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">let*</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>proj-root <span class="org-rainbow-delimiters-depth-5">(</span>projectile-project-root<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
         <span class="org-rainbow-delimiters-depth-4">(</span>filename <span class="org-rainbow-delimiters-depth-5">(</span>file-relative-name buffer-file-name proj-root<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
         <span class="org-rainbow-delimiters-depth-4">(</span>line <span class="org-rainbow-delimiters-depth-5">(</span>buffer-substring-no-properties <span class="org-rainbow-delimiters-depth-6">(</span>point-at-bol<span class="org-rainbow-delimiters-depth-6">)</span> <span class="org-rainbow-delimiters-depth-6">(</span>point-at-eol<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
         <span class="org-rainbow-delimiters-depth-4">(</span>annotation-buffer <span class="org-rainbow-delimiters-depth-5">(</span>find-file-noselect storage-file<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">with-current-buffer</span> annotation-buffer
      <span class="org-rainbow-delimiters-depth-4">(</span>org-annotate-file-annotate filename line<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    annotation-buffer<span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
The main function can then simply work out where the file with annotations
should be located and call <code>org-projectile-annotate--file-show-section</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">org-projectile-annotate</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">interactive</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">let</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>annot-fn <span class="org-rainbow-delimiters-depth-5">(</span>file-name-concat <span class="org-rainbow-delimiters-depth-6">(</span>projectile-project-root<span class="org-rainbow-delimiters-depth-6">)</span>
                                    org-projectile-annotate-file-name<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>set-window-buffer <span class="org-rainbow-delimiters-depth-4">(</span>split-window-right<span class="org-rainbow-delimiters-depth-4">)</span>
                       <span class="org-rainbow-delimiters-depth-4">(</span>org-projectile-annotate--file-show-section annot-fn<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
When testing it all out I noticed that <code>org-store-link</code> makes a link with a
search text. In my case it would be much better to have links with line numbers.
I found there's a hook to modify the behaviour of <code>org-store-link</code>,
<code>org-create-file-search-functions</code>. So I wrote a function to get the kind of
links I want, but only when the project annotation file is open in a buffer.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">org-projectile-annotate-file-search-func</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-doc">"A function returning the current line number when called in a</span>
<span class="org-doc">project while the project annotation file is open.</span>

<span class="org-doc">This function is designed for use in the hook</span>
<span class="org-doc">'</span><span class="org-doc"><span class="org-constant">org-create-file-search-functions</span></span><span class="org-doc">'. It changes the behaviour of</span>
<span class="org-doc">'</span><span class="org-doc"><span class="org-constant">org-store-link</span></span><span class="org-doc">' so it constructs a link with a line number</span>
<span class="org-doc">instead of a search string."</span>
  <span class="org-comment-delimiter">;; </span><span class="org-comment"><span class="custom">TODO:</span></span><span class="org-comment"> find a way to make the link description nicer</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">when</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">and</span> <span class="org-rainbow-delimiters-depth-4">(</span>projectile-project-p<span class="org-rainbow-delimiters-depth-4">)</span>
             <span class="org-rainbow-delimiters-depth-4">(</span>get-buffer-window org-projectile-annotate-file-name<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>number-to-string <span class="org-rainbow-delimiters-depth-4">(</span>line-number-at-pos<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
That's it, now I only have to wait until the next time I want to comment on a
project to see if it improves my way of working.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-org-mode.html">org-mode</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[org-mode]]></category>
  <link>https://magnus.therning.org/2022-09-24-annotate-projects-in-emacs.html</link>
  <guid>https://magnus.therning.org/2022-09-24-annotate-projects-in-emacs.html</guid>
  <pubDate>Sat, 24 Sep 2022 22:42:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Patching in Nix]]></title>
  <description><![CDATA[
<p>
Today I wanted to move one of my Haskell projects to GHC 9.2.4 and found that
<a href="https://hackage.haskell.org/package/envy-2.1.0.0">envy</a> didn't compile due to an upper bound on its dependency on <code>bytestring</code>, it
didn't allow <code>0.11.*</code>.
</p>

<p>
After creating a <a href="https://github.com/dmjio/envy/pull/49">PR</a> I decided I didn't want to wait for upstream so instead I
started looking into options for patching the source of a derivation of a
package from Hackage. In the past I've written about building <a href="https://magnus.therning.org/2020-11-30-1734-haskell__nix_and_using_packages_from_github.html">Haskell packages
from GitHub</a> and an older one were I used <code>callHackageDirect</code> to build <a href="https://magnus.therning.org/2020-02-02-000-my-ghcide-build-for-nix.html">Haskell
packages from Hackage</a>. I wasn't sure how to patch up a package from Hackage
though, but after a bit of digging through <a href="https://github.com/NixOS/nixpkgs/tree/master/pkgs/development/haskell-modules">haskell-modules</a> I found <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/haskell-modules/lib/default.nix#L194">appendPatch</a>.
</p>

<p>
The patch wasn't too hard to put together once I recalled the name of the patch
queue tool I used regularly years ago, <a href="https://savannah.nongnu.org/projects/quilt/">quilt</a>. I put the resulting patch in the
<code>nix</code> folder I already had, and the full override ended up looking like this
</p>

<div class="org-src-container">
<pre class="src src-nix">...
<span class="org-nix-attribute">hl</span> = haskell.lib;
<span class="org-nix-attribute">hsPkgs</span> = haskell.packages.ghc924;

<span class="org-nix-attribute">extraHsPkgs</span> = hsPkgs.override <span class="org-rainbow-delimiters-depth-1">{</span>
  <span class="org-nix-attribute">overrides</span> = self: super: <span class="org-rainbow-delimiters-depth-2">{</span>
    <span class="org-nix-attribute">envy</span> = hl.appendPatch <span class="org-rainbow-delimiters-depth-3">(</span>self.callHackageDirect <span class="org-rainbow-delimiters-depth-4">{</span>
      <span class="org-nix-attribute">pkg</span> = <span class="org-string">"envy"</span>;
      <span class="org-nix-attribute">ver</span> = <span class="org-string">"2.1.0.0"</span>;
      <span class="org-nix-attribute">sha256</span> =
        <span class="org-string">"sha256-yk8ARRyhTf9ImFJhDnVwaDiEQi3Rp4yBvswsWVVgurg="</span>;
    <span class="org-rainbow-delimiters-depth-4">}</span> <span class="org-rainbow-delimiters-depth-4">{</span> <span class="org-rainbow-delimiters-depth-4">}</span><span class="org-rainbow-delimiters-depth-3">)</span> <span class="org-nix-constant">./nix/envy-fix-deps.patch</span>;
  <span class="org-rainbow-delimiters-depth-2">}</span>;
<span class="org-rainbow-delimiters-depth-1">}</span>;
...
</pre>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-nix.html">nix</a> </div>
]]></description>
  <category><![CDATA[haskell]]></category>
  <category><![CDATA[nix]]></category>
  <link>https://magnus.therning.org/2022-08-21-patching-in-nix.html</link>
  <guid>https://magnus.therning.org/2022-08-21-patching-in-nix.html</guid>
  <pubDate>Sun, 21 Aug 2022 22:05:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Playing with setting up Emacs]]></title>
  <description><![CDATA[
<p>
TL;DR: I've put together a small-ish Emacs configuration that I call <a href="https://gitlab.com/magus/mes">MES</a>.
Hopefully it can be of use to someone out there.
</p>

<div id="outline-container-org34c29d2" class="outline-2">
<h2 id="org34c29d2">My Emacs Setup - MES</h2>
<div class="outline-text-2" id="text-org34c29d2">
<p>
The other day I started watching some videos in the <a href="https://www.youtube.com/watch?v=74zOY-vgkyw&amp;list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ">Emacs From Scratch</a> series
from <a href="https://github.com/SystemCrafters">System Crafters</a>. It looked like something that could be fun to play with so
over the last couple of days I've been tinkering with putting together the
beginnings of a configuration.
</p>

<p>
During the process I realised just how much work it'd be to put together
something that comes close to the polish of <a href="http://spacemacs.org/">Spacemacs</a>, so I've currently no
intention of actually using <i>MES</i> myself. It was fun though, and maybe it can
serve as inspiration (or as a deterrent) for someone else.
</p>

<p>
The major parts are
</p>

<ul class="org-ul">
<li><a href="https://github.com/emacs-evil/evil">evil</a></li>
<li><a href="https://github.com/minad/vertico">vertico</a>/<a href="https://github.com/minad/consult">consult</a>/&#x2026;</li>
<li><a href="https://github.com/noctuid/general.el">general.el</a></li>
<li><a href="https://magit.vc/">magit</a></li>
<li><a href="https://github.com/mclear-tools/tabspaces">tabspaces</a> (minimal config so I'm not sure it's useful)</li>
<li><a href="https://orgmode.org/">orgmode</a> (only the very basics)</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://magnus.therning.org/2022-07-09-playing-with-setting-up-emacs.html</link>
  <guid>https://magnus.therning.org/2022-07-09-playing-with-setting-up-emacs.html</guid>
  <pubDate>Sat, 09 Jul 2022 22:37:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Power-mode in Spacemacs]]></title>
  <description><![CDATA[
<p>
I just found the <a href="https://github.com/elizagamedev/power-mode.el">Power Mode</a> for Emacs. If you want to try it out in Spacemacs
you can make sure that your <code>~/.spacemacs</code> contains the following
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">dotspacemacs-additional-packages
'<span class="org-rainbow-delimiters-depth-1">(</span>
  ...
  <span class="org-rainbow-delimiters-depth-2">(</span>power-mode <span class="org-builtin">:location</span> <span class="org-rainbow-delimiters-depth-3">(</span>recipe
                         <span class="org-builtin">:fetcher</span> github
                         <span class="org-builtin">:repo</span> <span class="org-string">"elizagamedev/power-mode.el"</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
After a restart Power Mode can be turned on using <code>SPC SPC power-mode</code>.
</p>

<p>
Unfortunately I found that it slows down rendering so badly that Emacs isn't
keeping up with my typing. Even though I removed it right away again it was fun
to try it out, and I did learn how to add package to Spacemacs that aren't on
MELPA.
</p>

<p>
A useful resource is this <a href="https://github.com/melpa/melpa#recipe-format">reference on the recipe format</a>.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-spacemacs.html">spacemacs</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[spacemacs]]></category>
  <link>https://magnus.therning.org/2022-06-15-power-mode-in-spacemacs.html</link>
  <guid>https://magnus.therning.org/2022-06-15-power-mode-in-spacemacs.html</guid>
  <pubDate>Wed, 15 Jun 2022 08:08:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Comments and org-static-blog]]></title>
  <description><![CDATA[
<p>
I'm using <a href="https://github.com/bastibe/org-static-blog">org-static-blog</a> to generate the contents of this site. So far I'm very
happy with it, but I've gotten a few emails from readers who've wanted to
comment on something I've written and they always point out that it's not easy
to do. It's actually not a coincidence that it's a bit difficult!
</p>

<p>
Yesterday I came up with a way that might make is slightly easier without
involving JavaScript from a 3rd party. By making use of the built-in support for
adding HTML code for comments. One slight limitation is that it's a single
variable holding the code, and I'd really like to allow for both
</p>

<ul class="org-ul">
<li>using a link to a discussion site, e.g. <a href="https://www.reddit.com/">reddit</a>, as well as</li>
<li>my email address</li>
</ul>


<p>
As the comment support in org-static-blog comes in the form of a single variable
this seems a bit difficult to accomplish. However, it isn't difficult at all to
do in elisp due to the power of <code>advice-add</code>.
</p>

<p>
By using the following advice on <code>org-static-blog-publish-file</code>
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span>advice-add 'org-static-blog-publish-file <span class="org-builtin">:around</span>
            <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">lambda</span> <span class="org-rainbow-delimiters-depth-3">(</span>orig-fn filename <span class="org-type">&amp;rest</span> args<span class="org-rainbow-delimiters-depth-3">)</span>
              <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">let*</span>  <span class="org-rainbow-delimiters-depth-4">(</span><span class="org-rainbow-delimiters-depth-5">(</span>comments-url <span class="org-rainbow-delimiters-depth-6">(</span><span class="org-keyword">with-temp-buffer</span>
                                      <span class="org-rainbow-delimiters-depth-7">(</span>insert-file-contents filename<span class="org-rainbow-delimiters-depth-7">)</span>
                                      <span class="org-rainbow-delimiters-depth-7">(</span><span class="org-keyword">or</span> <span class="org-rainbow-delimiters-depth-8">(</span>cadar <span class="org-rainbow-delimiters-depth-9">(</span>org-collect-keywords '<span class="org-rainbow-delimiters-depth-1">(</span><span class="org-string">"commentsurl"</span><span class="org-rainbow-delimiters-depth-1">)</span><span class="org-rainbow-delimiters-depth-9">)</span><span class="org-rainbow-delimiters-depth-8">)</span>
                                          my-blog-default-comments-url<span class="org-rainbow-delimiters-depth-7">)</span><span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span>
                      <span class="org-rainbow-delimiters-depth-5">(</span>org-static-blog-post-comments <span class="org-rainbow-delimiters-depth-6">(</span>concat <span class="org-string">"Comment &lt;a href="</span> comments-url <span class="org-string">"&gt;here&lt;/a&gt;."</span><span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
                <span class="org-rainbow-delimiters-depth-4">(</span>apply orig-fn filename args<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
and defining <code>my-blog-default-comments-url</code> to a <code>mailto:...</code> URL I get a link
to use for commenting by either
</p>

<ol class="org-ol">
<li>set <code>commentsurl</code> to point to discussion about the post on reddit, or</li>
<li>not set <code>commentsurl</code> at all and get the <code>mailto:...</code> URL.</li>
</ol>


<p>
If you look at <a href="https://magnus.therning.org/2022-05-08-a-little-haskell:-epoch-timestamp.html">my previous post</a> you see the result of the former, and if you
look below you see the result of the latter.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-org-mode.html">org-mode</a> </div>
]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[org-mode]]></category>
  <link>https://magnus.therning.org/2022-05-09-comments-and-org-static-blog.html</link>
  <guid>https://magnus.therning.org/2022-05-09-comments-and-org-static-blog.html</guid>
  <pubDate>Mon, 09 May 2022 22:10:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[A little Haskell: epoch timestamp]]></title>
  <description><![CDATA[
<p>
A need of getting the current <a href="https://en.wikipedia.org/wiki/Unix_time">UNIX time</a> is something that comes up every now and
then. Just this week I needed it in order to add a <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-command">k8s liveness probe</a><sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>.
</p>

<p>
While it's often rather straight forward to get the Unix time as an integer in
other languages<sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>, in Haskell there's a bit of type tetris involved.
</p>


<ol class="org-ol">
<li><a href="https://hoogle.haskell.org/?hoogle=getPOSIXTime&amp;scope=set%3Astackage">getPOSIXTime</a> gives me a <a href="https://hoogle.haskell.org/?hoogle=POSIXTime&amp;scope=set%3Astackage">POSIXTime</a>, which is an alias for <a href="https://hoogle.haskell.org/?hoogle=NominalDiffTime&amp;scope=set%3Astackage">NominalDiffTime</a>.</li>
<li><code>NominalDiffTime</code> implements <a href="https://hoogle.haskell.org/?hoogle=RealFrac&amp;scope=set%3Astackage">RealFrac</a> and can thus be converted to anything
implementing <a href="https://hoogle.haskell.org/?hoogle=Integral&amp;scope=set%3Astackage">Integral</a> (I wanted it as <code>Int64</code>).</li>
<li><code>NominalDiffTime</code> also implements <a href="https://hoogle.haskell.org/?hoogle=Num&amp;scope=set%3Astackage">Num</a>, so if the timestamp needs better
precision than seconds it's easy to do (I needed milliseconds).</li>
</ol>


<p>
The combination of the above is something like
</p>

<div class="org-src-container">
<pre class="src src-haskell">truncate <span class="org-haskell-definition">&lt;$&gt;</span> getPOSIXTime
</pre>
</div>

<p>
In my case the full function of writing the timestamp to a file looks like this
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">writeTimestampFile</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">MonadIO</span> m <span class="org-haskell-operator">=&gt;</span> <span class="org-haskell-type">Path</span> <span class="org-haskell-type">Abs</span> <span class="org-haskell-type">File</span> <span class="org-haskell-operator">-&gt;</span> m <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
<span class="org-haskell-definition">writeTimestampFile</span> afn <span class="org-haskell-operator">=</span> liftIO <span class="org-haskell-operator">$</span> <span class="org-haskell-keyword">do</span>
    truncate <span class="org-haskell-operator">@</span><span class="org-haskell-keyword">_</span> <span class="org-haskell-operator">@</span><span class="org-haskell-constructor">Int64</span> <span class="org-haskell-operator">.</span> <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-operator">*</span> <span class="org-highlight-numbers-number">1000</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">&lt;$&gt;</span> getPOSIXTime <span class="org-haskell-operator">&gt;&gt;=</span> writeFile <span class="org-rainbow-delimiters-depth-1">(</span>fromAbsFile afn<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">.</span> show
</pre>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Over the last few days I've looked into <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">k8s probes</a>. Since we're using
<a href="https://istio.io/latest/">Istio</a> TCP probes are of very <a href="https://github.com/istio/istio/pull/28737#pullrequestreview-535660318">limited use</a>, and as the service in question doesn't
offer an HTTP API I decided to use a liveness command that checks that the
contents of a file is a sufficiently recent epoch timestamp.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Rust's Chrono package has <a href="https://docs.rs/chrono/0.4.19/chrono/struct.DateTime.html#method.timestamp">Utc.timestamp(t)</a>. Python has <a href="https://docs.python.org/3/library/time.html?highlight=time%20time#time.time">time.time()</a>.
Golang has <a href="https://pkg.go.dev/time#Time.Unix">Time.Unix</a>.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-k8s.html">k8s</a> </div>
]]></description>
  <category><![CDATA[haskell]]></category>
  <category><![CDATA[k8s]]></category>
  <link>https://magnus.therning.org/2022-05-08-a-little-haskell:-epoch-timestamp.html</link>
  <guid>https://magnus.therning.org/2022-05-08-a-little-haskell:-epoch-timestamp.html</guid>
  <pubDate>Sun, 08 May 2022 07:51:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Simple nix flake for Haskell development]]></title>
  <description><![CDATA[
<p>
Recently I've moved over to using <a href="https://nixos.wiki/wiki/Flakes">flakes</a> in my Haskell development projects. It
took me a little while to arrive at a pattern a flake for Haskell development
that I like. I'm hoping sharing it might help others when doing the same change
</p>

<div class="org-src-container">
<pre class="src src-nix"><span class="org-rainbow-delimiters-depth-1">{</span>
  <span class="org-nix-attribute">inputs</span> = <span class="org-rainbow-delimiters-depth-2">{</span>
    <span class="org-nix-attribute">nixpkgs.url</span> = <span class="org-string">"github:nixos/nixpkgs"</span>;
    <span class="org-nix-attribute">flake-utils.url</span> = <span class="org-string">"github:numtide/flake-utils"</span>;
  <span class="org-rainbow-delimiters-depth-2">}</span>;

  <span class="org-nix-attribute">outputs</span> = <span class="org-rainbow-delimiters-depth-2">{</span> self, nixpkgs, flake-utils <span class="org-rainbow-delimiters-depth-2">}</span>:
    flake-utils.lib.eachDefaultSystem <span class="org-rainbow-delimiters-depth-2">(</span>system:
      <span class="org-nix-keyword">with</span> nixpkgs.legacyPackages.$<span class="org-rainbow-delimiters-depth-3">{</span>system<span class="org-rainbow-delimiters-depth-3">}</span>;
      <span class="org-nix-keyword">let</span>
        <span class="org-nix-attribute">t</span> = lib.trivial;
        <span class="org-nix-attribute">hl</span> = haskell.lib;

        <span class="org-nix-attribute">name</span> = <span class="org-string">"project-name"</span>;

        <span class="org-nix-attribute">project</span> = devTools: <span class="org-comment"># [1]</span>
          <span class="org-nix-keyword">let</span> <span class="org-nix-attribute">addBuildTools</span> = <span class="org-rainbow-delimiters-depth-3">(</span>t.flip hl.addBuildTools<span class="org-rainbow-delimiters-depth-3">)</span> devTools;
          <span class="org-nix-keyword">in</span> haskellPackages.developPackage <span class="org-rainbow-delimiters-depth-3">{</span>
            <span class="org-nix-attribute">root</span> = lib.sourceFilesBySuffices <span class="org-nix-constant">./.</span> <span class="org-rainbow-delimiters-depth-4">[</span> <span class="org-string">".cabal"</span> <span class="org-string">".hs"</span> <span class="org-rainbow-delimiters-depth-4">]</span>;
            <span class="org-nix-attribute">name</span> = name;
            <span class="org-nix-attribute">returnShellEnv</span> = !<span class="org-rainbow-delimiters-depth-4">(</span>devTools == <span class="org-rainbow-delimiters-depth-5">[</span> <span class="org-rainbow-delimiters-depth-5">]</span><span class="org-rainbow-delimiters-depth-4">)</span>; <span class="org-comment"># [2]</span>

            <span class="org-nix-attribute">modifier</span> = <span class="org-rainbow-delimiters-depth-4">(</span>t.flip t.pipe<span class="org-rainbow-delimiters-depth-4">)</span> <span class="org-rainbow-delimiters-depth-4">[</span>
              addBuildTools
              hl.dontHaddock
              hl.enableStaticLibraries
              hl.justStaticExecutables
              hl.disableLibraryProfiling
              hl.disableExecutableProfiling
            <span class="org-rainbow-delimiters-depth-4">]</span>;
          <span class="org-rainbow-delimiters-depth-3">}</span>;

      <span class="org-nix-keyword">in</span> <span class="org-rainbow-delimiters-depth-3">{</span>
        <span class="org-nix-attribute">packages.pkg</span> = project <span class="org-rainbow-delimiters-depth-4">[</span> <span class="org-rainbow-delimiters-depth-4">]</span>; <span class="org-comment"># [3]</span>

        <span class="org-nix-attribute">defaultPackage</span> = self.packages.$<span class="org-rainbow-delimiters-depth-4">{</span>system<span class="org-rainbow-delimiters-depth-4">}</span>.pkg;

        <span class="org-nix-attribute">devShell</span> = project <span class="org-rainbow-delimiters-depth-4">(</span><span class="org-nix-keyword">with</span> haskellPackages; <span class="org-rainbow-delimiters-depth-5">[</span> <span class="org-comment"># [4]</span>
          cabal-fmt
          cabal-install
          haskell-language-server
          hlint
        <span class="org-rainbow-delimiters-depth-5">]</span><span class="org-rainbow-delimiters-depth-4">)</span>;
      <span class="org-rainbow-delimiters-depth-3">}</span><span class="org-rainbow-delimiters-depth-2">)</span>;
<span class="org-rainbow-delimiters-depth-1">}</span>
</pre>
</div>

<p>
The main issue I ran into is getting a development shell out of
<code>haskellPackages.developPackage</code>, it requires <code>returnShellEnv</code> to be <code>true</code>.
Something that isn't too easy to find out. This means that the only solution
I've found to getting a development shell is to have separate expressions for
building and getting a shell. In the above flake the build expression, <i>[3]</i>,
passes an empty list of development tools, the argument <code>devTools</code> at <i>[1]</i>,
while the development shell expression, <i>[4]</i>, passes in a list of tools needed
for development only. The decision of whether the expression is for building or
for a development shell, <i>[2]</i>, then looks at the list of development tools
passed in.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-nix.html">nix</a> </div>]]></description>
  <category><![CDATA[haskell]]></category>
  <category><![CDATA[nix]]></category>
  <link>https://magnus.therning.org/2022-03-13-simple-nix-flake-for-haskell-development.html</link>
  <guid>https://magnus.therning.org/2022-03-13-simple-nix-flake-for-haskell-development.html</guid>
  <pubDate>Sun, 13 Mar 2022 07:29:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Keeping Projectile's cache tidy]]></title>
  <description><![CDATA[
<p>
A while back I added a function to find all projects recursively from a
directory and add them to Projectile's cache (see the <a href="2019-11-05-000-populating-projectile-s-cache.html">Populating Projectile's
cache</a>). Since then I've just made a tiny change to also include containing a
<code>.projectile</code> file.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">projectile-extra-add-projects-in-subfolders</span> <span class="org-rainbow-delimiters-depth-2">(</span>projects-root<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">interactive</span> <span class="org-rainbow-delimiters-depth-3">(</span>list <span class="org-rainbow-delimiters-depth-4">(</span>read-directory-name <span class="org-string">"Add to known projects: "</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>message <span class="org-string">"Searching for projects in %s..."</span> projects-root<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">let*</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>proj-rx <span class="org-rainbow-delimiters-depth-5">(</span><span class="org-keyword">rx</span> <span class="org-rainbow-delimiters-depth-6">(</span><span class="org-keyword">and</span> line-start ?. <span class="org-rainbow-delimiters-depth-7">(</span><span class="org-keyword">or</span> <span class="org-string">"projectile"</span> <span class="org-string">"git"</span><span class="org-rainbow-delimiters-depth-7">)</span> line-end<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
         <span class="org-rainbow-delimiters-depth-4">(</span>dirs <span class="org-rainbow-delimiters-depth-5">(</span>seq-map
                'file-name-directory
                <span class="org-rainbow-delimiters-depth-6">(</span>directory-files-recursively projects-root
                                             proj-rx
                                             t<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>seq-do 'projectile-add-known-project dirs<span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>message <span class="org-string">"Added %d projects"</span> <span class="org-rainbow-delimiters-depth-4">(</span>length dirs<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
Since then I've also found a need for tidying the cache, in my casse that means
removing entries in the cache that no longer exist on disk. I didn't find a
function for it, so I wrote one.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">projectile-extra-tidy-projects</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">interactive</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">let</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>missing-dirs <span class="org-rainbow-delimiters-depth-5">(</span>seq-remove 'file-directory-p projectile-known-projects<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>seq-do 'projectile-remove-known-project missing-dirs<span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>message <span class="org-string">"Tidied %d projects"</span> <span class="org-rainbow-delimiters-depth-4">(</span>length missing-dirs<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-elisp.html">elisp</a> <a href="https://magnus.therning.org/tag-projectile.html">projectile</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[elisp]]></category>
  <category><![CDATA[projectile]]></category>
  <link>https://magnus.therning.org/2022-01-30-keeping-projectile's-cache-tidy.html</link>
  <guid>https://magnus.therning.org/2022-01-30-keeping-projectile's-cache-tidy.html</guid>
  <pubDate>Sun, 30 Jan 2022 15:14:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Accessing the host from inside a Docker container]]></title>
  <description><![CDATA[
<p>
To give the container access to a service running on the the host add
<code>extra_hosts</code> to its definition in the Compose file:
</p>

<div class="org-src-container">
<pre class="src src-yaml"><span class="org-variable-name">svc</span>:
  ...
  <span class="org-variable-name">extra_hosts</span>:
    - <span class="org-string">"host.docker.internal:host-gateway"</span>
</pre>
</div>

<p>
Then it's possible to access it as <code>host.docker.internal</code>. Just don't forget to
bind the service on the host to something else than <code>127.0.0.1</code>.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-compose.html">compose</a> <a href="https://magnus.therning.org/tag-docker.html">docker</a> </div>]]></description>
  <category><![CDATA[compose]]></category>
  <category><![CDATA[docker]]></category>
  <link>https://magnus.therning.org/2022-01-03-accessing-the-host-from-inside-a-docker-container.html</link>
  <guid>https://magnus.therning.org/2022-01-03-accessing-the-host-from-inside-a-docker-container.html</guid>
  <pubDate>Mon, 03 Jan 2022 13:48:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Trimming newline on code block variable]]></title>
  <description><![CDATA[
<p>
Today I found <a href="https://github.com/zweifisch/ob-http">ob-http</a> and decided to try it out a little. I quickly ran into a
problem of a trailing newline. Basically I tried to do something like this:
</p>

<div class="org-src-container">
<pre class="src src-org"><span class="org-org-meta-line">#+name: id</span>
<span class="org-org-block-begin-line">#+begin_src http :select .id :cache yes</span>
<span class="org-org-block"><span class="org-constant">POST</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-function-name">/foo</span></span>
<span class="org-org-block"><span class="org-variable-name">Content-Type</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">application/json</span></span>

<span class="org-org-block"><span class="org-comment">{</span></span>
<span class="org-org-block">  </span><span class="org-org-block"><span class="org-string">"foo"</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">"toto"</span></span><span class="org-org-block"><span class="org-comment">,</span></span>
<span class="org-org-block">  </span><span class="org-org-block"><span class="org-string">"bar"</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">"tata"</span></span>
<span class="org-org-block"><span class="org-comment">}</span></span>
<span class="org-org-block-end-line">#+end_src</span>

<span class="org-org-meta-line">#+RESULTS[c5fd99206822a2109d7ac1d140185e6ec3f4f1d9]: id</span>
<span class="org-org-block-begin-line">#+begin_example</span>
<span class="custom">48722051-f81b-433f-acb4-a65d961ec841</span>
<span class="org-org-block-end-line">#+end_example</span>

<span class="org-org-meta-line">#+header: :var id=id</span>
<span class="org-org-block-begin-line">#+begin_src http</span>
<span class="org-org-block"><span class="org-constant">POST</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-function-name">/foo/${id}/fix</span></span>
<span class="org-org-block-end-line">#+end_src</span>
</pre>
</div>

<p>
The trailing newline messes up the URL though, and the second code block fails.
</p>

<p>
I found two ways to deal with it, using a table and using <code>org-sbe</code>
</p>

<div id="outline-container-org3ef143c" class="outline-2">
<h2 id="org3ef143c">Using a table</h2>
<div class="outline-text-2" id="text-org3ef143c">
<div class="org-src-container">
<pre class="src src-org"><span class="org-org-meta-line">#+name: id</span>
<span class="org-org-block-begin-line">#+begin_src http :select .id :cache yes :results table</span>
<span class="org-org-block"><span class="org-constant">POST</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-function-name">/foo</span></span>
<span class="org-org-block"><span class="org-variable-name">Content-Type</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">application/json</span></span>

<span class="org-org-block"><span class="org-comment">{</span></span>
<span class="org-org-block">  </span><span class="org-org-block"><span class="org-string">"foo"</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">"toto"</span></span><span class="org-org-block"><span class="org-comment">,</span></span>
<span class="org-org-block">  </span><span class="org-org-block"><span class="org-string">"bar"</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">"tata"</span></span>
<span class="org-org-block"><span class="org-comment">}</span></span>
<span class="org-org-block-end-line">#+end_src</span>

<span class="org-org-meta-line">#+RESULTS[c5fd99206822a2109d7ac1d140185e6ec3f4f1d9]: id</span>
<span class="org-org-block-begin-line">#+begin_example</span>
<span class="custom">| 48722051-f81b-433f-acb4-a65d961ec841 |</span>
<span class="org-org-block-end-line">#+end_example</span>

<span class="org-org-meta-line">#+header: :var id=id[0,0]</span>
<span class="org-org-block-begin-line">#+begin_src http</span>
<span class="org-org-block"><span class="org-constant">POST</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-function-name">/foo/${id}/fix</span></span>
<span class="org-org-block-end-line">#+end_src</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org33493ca" class="outline-2">
<h2 id="org33493ca">Using <code>org-sbe</code></h2>
<div class="outline-text-2" id="text-org33493ca">
<div class="org-src-container">
<pre class="src src-org"><span class="org-org-meta-line">#+name: id</span>
<span class="org-org-block-begin-line">#+begin_src http :select .id :cache yes</span>
<span class="org-org-block"><span class="org-constant">POST</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-function-name">/foo</span></span>
<span class="org-org-block"><span class="org-variable-name">Content-Type</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">application/json</span></span>

<span class="org-org-block"><span class="org-comment">{</span></span>
<span class="org-org-block">  </span><span class="org-org-block"><span class="org-string">"foo"</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">"toto"</span></span><span class="org-org-block"><span class="org-comment">,</span></span>
<span class="org-org-block">  </span><span class="org-org-block"><span class="org-string">"bar"</span></span><span class="org-org-block"><span class="org-comment">:</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-string">"tata"</span></span>
<span class="org-org-block"><span class="org-comment">}</span></span>
<span class="org-org-block-end-line">#+end_src</span>

<span class="org-org-meta-line">#+RESULTS[c5fd99206822a2109d7ac1d140185e6ec3f4f1d9]: id</span>
<span class="org-org-block-begin-line">#+begin_example</span>
<span class="custom">48722051-f81b-433f-acb4-a65d961ec841</span>
<span class="org-org-block-end-line">#+end_example</span>

<span class="org-org-meta-line">#+header: :var id=(org-sbe id)</span>
<span class="org-org-block-begin-line">#+begin_src http</span>
<span class="org-org-block"><span class="org-constant">POST</span></span><span class="org-org-block"> </span><span class="org-org-block"><span class="org-function-name">/foo/${id}/fix</span></span>
<span class="org-org-block-end-line">#+end_src</span>
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-org-mode.html">org-mode</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[org-mode]]></category>
  <link>https://magnus.therning.org/2022-01-01-trimming-newline-on-code-block-variable.html</link>
  <guid>https://magnus.therning.org/2022-01-01-trimming-newline-on-code-block-variable.html</guid>
  <pubDate>Sat, 01 Jan 2022 19:24:00 +0100</pubDate>
</item>
</channel>
</rss>
